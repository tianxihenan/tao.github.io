<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  <icon>https://www.gravatar.com/avatar/a0257f72ad1be5e15aaef272e1009864</icon>
  <subtitle>yiduohua</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-04T21:26:40.126Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>tao</name>
    <email>25373010068@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pwn</title>
    <link href="http://example.com/2023/03/05/pwn/"/>
    <id>http://example.com/2023/03/05/pwn/</id>
    <published>2023-03-04T21:23:01.422Z</published>
    <updated>2023-03-04T21:26:40.126Z</updated>
    
    <content type="html"><![CDATA[<p>Welcom</p><h1 id="一、level0"><a href="#一、level0" class="headerlink" title="一、level0"></a>一、level0</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/94804d959252e33b5031fb1d2f863cdf.png" alt="img"></p><h3 id="1-1用checksec查看"><a href="#1-1用checksec查看" class="headerlink" title="1.1用checksec查看"></a>1.1用checksec查看</h3><p>下载附件，使用checksec命令查看该程序是32位还是64位，开启了哪些保护。<img src="https://img-blog.csdnimg.cn/img_convert/f08a4f0a7f7d42a23a9dff948886153d.png" alt="img"></p><blockquote><p><strong>NX 代表 不可执行</strong> (non-executable) 。它通常在 CPU 层面上启用，因此启用 NX 的操作系统可以将某些内存区域标记为不可执行。通常，缓冲区溢出漏洞将恶意代码放在堆栈上，然后尝试执行它。但是，让堆栈这些可写区域变得不可执行，可以防止这种攻击。</p></blockquote><h3 id="1-2-ida"><a href="#1-2-ida" class="headerlink" title="1.2 ida"></a>1.2 ida</h3><p>接着我们将文件放到<strong>IDA</strong>64位里，用f5反汇编查看<img src="https://img-blog.csdnimg.cn/img_convert/81738c64d4ff827f301111ce6955c3b6.png" alt="img"></p><p>代码中提示有一个vulnerable_function()函数进入查看<img src="https://img-blog.csdnimg.cn/img_convert/6997c705143c0285f6d7c587636ab82c.png" alt="img"></p><p>显而易见此处存在栈溢出漏洞，buf的长度为128个字节（也就是0x80）但是read()函数允许往buf中输入<strong>0x200</strong>字节数据。</p><blockquote><p>&#x2F;bin&#x2F;sh是一个特殊的字符串，它代表了一个Unix&#x2F;Linux系统中的shell程序，通常是Bash。在pwn题中，攻击者可以通过控制程序的输入，将&#x2F;bin&#x2F;sh的地址作为参数传递给system函数或者execve函数，从而获取一个shell进程并执行命令。因此，&#x2F;bin&#x2F;sh通常被用于pwn题中的ROP（Return-oriented programming）或者其他代码执行漏洞的利用中。</p></blockquote><p>接着，我们shift+F12可以看到有个很可疑的&#x2F;bin&#x2F;sh，我们双击进去看看</p><p><img src="https://img-blog.csdnimg.cn/img_convert/81b14e74550c3baab9b5d056f7b658d7.png" alt="img"></p><p>接着我们点击那一行后面的<strong>callsystem</strong>进入它的函数体</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cac97a368deb9ed60f0946301f9527a3.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/83f0a4d3a6264cb164ca2c775d3873b7.png" alt="img"></p><p>该函数调用了system(“&#x2F;bin&#x2F;sh”)我们可以利用此函数来get shell</p><h3 id="1-3整体思路："><a href="#1-3整体思路：" class="headerlink" title="1.3整体思路："></a><strong>1.3整体思路：</strong></h3><p><strong>是向buf处输入0x80字节的数据填满buf，此时在继续输入0x80字节的数据造成溢出覆盖ebp处的数据。</strong></p><p><strong>再继续输入数据把返回地址处的数据覆盖为callsystem()的地址，这样vulnerable_function()函数原本要返回到main()函数但是却返回到了callsystem()函数来执行callsystem()</strong></p><h3 id="1-4接下来开始写exp："><a href="#1-4接下来开始写exp：" class="headerlink" title="1.4接下来开始写exp："></a>1.4接下来开始写exp：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote (<span class="string">&#x27;61.147.171.105&#x27;</span>, <span class="number">54500</span>)<span class="comment">#连接远程</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./23&#x27;</span>)<span class="comment">#打开本地程序</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">0x8</span>) + p64(elf.symbols[<span class="string">&#x27;callsystem&#x27;</span>])<span class="comment">#构造payload 需要覆盖0x80个地址+上个ebp地址\# 输入payload来进行操作以拿到程序的shell payload一般等于 偏移量 + 地址</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Hello, World\n&quot;</span>)<span class="comment">#接收远程的返回</span></span><br><span class="line">p.send(payload)<span class="comment">#发送payload</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行脚本得到flag!</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20230228131023932.png" alt="image-20230228131023932"></p><p><strong>以下是我对上面exp的一些函数的总结，这也是我正在学习的象征，虽然只能做一些简单的题，不过我会加油的。</strong></p><p><strong>在编写pwn题的exp代码时，通常需要调试和测试代码，因此需要输出详细的日志信息。因此，<code>context.log_level=&quot;debug&quot;</code>可以帮助开发者更好地了解代码的执行过程和结果，从而更快地发现和解决问题。</strong></p><blockquote><p>**p.recvuntil(string)**是pwntools库中的一个函数，用于接收程序输出中的数据，直到包含指定字符串<code>string</code>的数据出现为止。具体来说，它会等待程序输出数据，并将数据缓存到一个数据缓冲区中，直到缓冲区中包含了指定的字符串<code>string</code>为止，然后返回缓冲区中的数据。如果程序输出中没有包含指定的字符串<code>string</code>，则<code>p.recvuntil(string)</code>会一直等待，直到超时或者接收到数据为止。如果超时，则会抛出一个异常。</p><p>在编写pwn题的exp代码时，通常需要从程序输出中获取一些敏感信息，例如栈指针、libc的基址等等。因此，可以使用<code>p.recvuntil(string)</code>函数接收程序输出中的数据，并从中提取需要的信息。通常情况下，需要多次使用<code>p.recvuntil(string)</code>函数接收程序输出中的数据，以便于获取完整的信息和数据。</p></blockquote><p><strong>需要注意的是，在使用<code>p.recvuntil(string)</code>函数时，需要确保指定的字符串<code>string</code>是唯一的，否则可能会导致接收到错误的数据或者超时。为了避免这种情况，可以使用一些特殊的字符串或者标记来区分不同的输出数据。另外，在实际使用中，需要根据程序的具体输出格式和漏洞类型，选择合适的接收函数和接收方式，以便于获取正确的数据并编写有效的exploit代码</strong>。</p><blockquote><p>**p.sendline(payload)**是pwntools库中的一个函数，用于向程序发送数据并添加一个换行符。具体来说，它会将指定的数据<code>payload</code>发送给程序，并在数据的末尾添加一个换行符<code>\n</code>，以便于模拟用户在终端中输入数据的行为。发送数据后，函数会等待程序的响应并将响应数据缓存到一个数据缓冲区中，然后返回缓冲区中的数据。如果程序没有响应或者响应超时，则会抛出一个异常。</p><p>在编写pwn题的exploit代码时，通常需要向程序发送一些特定的数据，例如缓冲区溢出的payload、格式化字符串的参数等等。使用<code>p.sendline(payload)</code>函数可以将这些数据发送给程序，并使用<code>\n</code>换行符模拟用户输入的行为。这样可以使payload或者输入数据更加真实和有效，从而更容易绕过一些安全保护和检测机制，例如ASLR和DEP等。</p></blockquote><p><strong>需要注意的是，在使用<code>p.sendline(payload)</code>函数时，需要确保发送的数据和换行符的格式是正确的，否则可能会导致程序崩溃或者无法正常运行。为了避免这种情况，可以使用一些特殊的字符或者标记来区分不同的数据，或者使用一些工具或者脚本来自动生成payload或者输入数据。另外，在实际使用中，需要根据程序的具体输入格式和漏洞类型，选择合适的发送函数和发送方式，以便于构造有效的exploit代码。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcom&lt;/p&gt;
&lt;h1 id=&quot;一、level0&quot;&gt;&lt;a href=&quot;#一、level0&quot; class=&quot;headerlink&quot; title=&quot;一、level0&quot;&gt;&lt;/a&gt;一、level0&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdni</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Crypto</title>
    <link href="http://example.com/2023/03/05/Crypto/"/>
    <id>http://example.com/2023/03/05/Crypto/</id>
    <published>2023-03-04T21:22:43.435Z</published>
    <updated>2023-03-04T21:26:12.375Z</updated>
    
    <content type="html"><![CDATA[<p>Welcom</p><h1 id="攻防世界Crypto-初识rsa"><a href="#攻防世界Crypto-初识rsa" class="headerlink" title="攻防世界Crypto - 初识rsa"></a><strong>攻防世界Crypto - 初识rsa</strong></h1><h2 id="1-下载附件"><a href="#1-下载附件" class="headerlink" title="1.下载附件"></a>1.下载附件<img src="https://img-blog.csdnimg.cn/img_convert/4398c3e509a2988046a8dbdf26053428.png" alt="img"></h2><p>这是一道简单的rsa类型的题，我们下载附件后可以看到代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,inverse,getPrime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)<span class="comment">#bytes_to_long 是 Python 中的一个函数，用于将字节数组转换为整数</span></span><br><span class="line"><span class="comment">#在 RSA 加密和解密中，我们需要将明文和密文表示为一个整数。因此，在进行 RSA 加密和解密时，我们需要使用 bytes_to_long 将明文和密文转换为整数，使用 long_to_bytes 将整数转换为字节数组。</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)<span class="comment">#`pow` 是 Python 中的一个内置函数，用于计算一个数的幂。具体地，`pow(x, y, z)` 返回的结果为 `x*y % z`。其中，`x` 和 `y` 是整数，`z` 是可选的模数。</span></span><br><span class="line"></span><br><span class="line">pq = p*(q-<span class="number">1</span>)</span><br><span class="line">qp = q*(p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pq=&quot;</span>,pq)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;qp=&quot;</span>,qp)</span><br><span class="line"><span class="meta">... </span>...//代码给出了c、n、pq、qp的值 在此省略了</span><br></pre></td></tr></table></figure><ul><li>关于rsa</li></ul><blockquote><p>在RSA加密中，明文m通过公钥进行加密得到密文c，即c&#x3D;m^e mod n。在RSA解密中，密文c通过私钥进行解密得到明文m，即m&#x3D;c^d mod n。其中，n&#x3D;p<em>q，p和q均为大质数，e是与(p-1)</em>(q-1) 互质的数，d是e在模 (p-1)<em>(q-1) 意义下的逆元。*<em>加密m^e mod N &#x3D;c解密 c^d mod N &#x3D; m</em></em></p></blockquote><p>在RSA加密算法中，phi函数（也称欧拉函数）是一个重要的参数。phi函数的值是根据选择的两个质数p和q计算出来的。phi函数的含义是小于n的正整数中与n互质的数的个数，其中<strong>n&#x3D;p*q</strong>。phi函数的计算公式为：<strong>phi(n) &#x3D; (p-1) * (q-1)</strong></p><p>在这里他给出的时pq和qp，并且我们知道了n，而n&#x3D;pq，这里应该是大数相乘有偏差导致的，具体解决方法用pq*qp&#x2F;n</p><h2 id="2-编写后的脚本加密"><a href="#2-编写后的脚本加密" class="headerlink" title="2.编写后的脚本加密"></a>2.编写后的脚本加密</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse,long_to_bytes</span><br><span class="line">c= ‘’</span><br><span class="line">n= ‘’</span><br><span class="line">pq= ‘’</span><br><span class="line">qp= ‘’</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = pq*qp//n</span><br><span class="line"><span class="built_in">print</span>(phi)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="3运行脚本得到flag"><a href="#3运行脚本得到flag" class="headerlink" title="3运行脚本得到flag"></a>3运行脚本得到flag</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/55fd9903f379f9148eb7cc5d63413fb9.png" alt="img"></p><p>运行就可以得到flag了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcom&lt;/p&gt;
&lt;h1 id=&quot;攻防世界Crypto-初识rsa&quot;&gt;&lt;a href=&quot;#攻防世界Crypto-初识rsa&quot; class=&quot;headerlink&quot; title=&quot;攻防世界Crypto - 初识rsa&quot;&gt;&lt;/a&gt;&lt;strong&gt;攻防世界Crypto - 初</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/02/25/hello-world/"/>
    <id>http://example.com/2023/02/25/hello-world/</id>
    <published>2023-02-25T02:55:57.729Z</published>
    <updated>2023-03-04T00:26:02.954Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="一、-极客大挑战-2019-Secret-File-1解题思路"><a href="#一、-极客大挑战-2019-Secret-File-1解题思路" class="headerlink" title="一、[极客大挑战 2019]Secret File 1解题思路"></a>一、[极客大挑战 2019]Secret File 1解题思路</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/7a7ca8cd81dfdde9a0379ea84d0d335c.png" alt="img"></p><h3 id="1-开启靶机"><a href="#1-开启靶机" class="headerlink" title="1.开启靶机"></a>1.开启靶机</h3><p>开启靶机后进入网址，没有什么好的信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6c5094598fefd7dd7333e2632ebff1d3.png" alt="img"></p><h3 id="2-按F12查看源代码"><a href="#2-按F12查看源代码" class="headerlink" title="2.按F12查看源代码"></a>2.按F12查看源代码</h3><p>发现了一个网址.&#x2F;Archive_room.php按CTRL键点击即可进入，可以看到</p><p><img src="https://img-blog.csdnimg.cn/img_convert/240faba07eaf97b3e701de1e7da7fca1.png" alt="img"></p><p>点击这个SECRET并没有发生什么，后面倒是说“查阅结束”，那么就说明，速度很快，肉眼看不到，那我们就要借用工具burpsuite。首先下开启代理服务器</p><h3 id="3-使用burpsuite"><a href="#3-使用burpsuite" class="headerlink" title="3.使用burpsuite"></a>3.使用burpsuite<img src="https://img-blog.csdnimg.cn/img_convert/ec786b401fe133c346e66ee47ba7a2ab.png" alt="img"></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/efb7f0e3de717041c1ac19d352dbbc9a.png" alt="img"></p><p>进入到这个界面，软件中应该显示出获取的信息，点击forward直到信息中出现action.php(根据源代码提示)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/906cd9cf375e974f7f0ec1d4740c68a2.png" alt="img"></p><p>接着将这串数据发送到repeater，在repeater里我们点击Go就进入到下面的界面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ca09d303bef3505fbb8cea397dd330fb.png" alt="img"></p><p>后面的话我们就可以输入网址<a href="http://78b3b06a-804f-46c6-8d85-8635948e27ad.node4.buuoj.cn/secr3t.php%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%88%E8%AE%B0%E7%9D%80%E8%A6%81%E5%B0%86burpsuite%E5%92%8C%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B3%E9%97%AD%EF%BC%8C%E5%90%A6%E5%88%99%E6%98%AF%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%EF%BC%89">http://78b3b06a-804f-46c6-8d85-8635948e27ad.node4.buuoj.cn/secr3t.php可以查看源代码（记着要将burpsuite和局域网关闭，否则是打不开的）</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c1b5cbae463c8b351a02d691e55dc88b.png" alt="img"></p><h3 id="4-代码解释"><a href="#4-代码解释" class="headerlink" title="4.代码解释"></a>4.代码解释</h3><p>这是一个PHP脚本，以HTML标签开头。该脚本包含了一个PHP函数 <code>highlight_file(__FILE__)</code>，该函数可以高亮正在执行的PHP代码。</p><p>然后，该脚本设置了 <code>error_reporting(0)</code>，以关闭错误报告。</p><p>该脚本通过 <code>$_GET</code> 超全局变量接收一个文件名作为参数。然后它检查文件名是否包含以下任何字符串： “..&#x2F;“、”tp”、”input” 或 “data”。如果包含，则脚本会打印 “Oh no!” 并退出。这是一种安全措施，用于防止目录遍历攻击并保护服务器免受恶意文件包含的攻击。</p><p>如果文件名通过了安全检查，该脚本将使用 <code>include</code> 语句包含该文件。被包含的文件的内容将作为PHP代码执行。</p><p>标志存储在名为 “flag.php” 的文件中，该文件可能由此脚本包含。</p><h3 id="5-PHP伪协议"><a href="#5-PHP伪协议" class="headerlink" title="5.PHP伪协议"></a>5.PHP伪协议</h3><p>看到flag.php应该联想到<a href="https://segmentfault.com/a/1190000018991087">php伪协议</a>，在后面加上<br>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php即可。</p><p>这是因为 php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode 是一种 PHP 伪协议，用于将文件转换为 base64 格式。通过在 $_GET 超全局变量中传递 file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php，我们可以读取 flag.php 文件的内容并将其转换为 base64 格式。然后，我们可以将该内容解码并查看其中是否包含有用的信息。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d215ff68e0fb087898bcc6696330a751.png" alt="img"></p><p>就会给出一堆符号的组合，显然这是base64的密文，接着在base64解密下即可求得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7Mzk2MDEzYmItZjRkNC00NThjLWJmYWItYzhmODk4ZmI4Zjc0fSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=</span><br></pre></td></tr></table></figure><h3 id="6-解密得到flag"><a href="#6-解密得到flag" class="headerlink" title="6.解密得到flag"></a>6.解密得到flag</h3><p>base64在线解密网址：<a href="http://www.jsons.cn/base64/">http://www.jsons.cn/base64/</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ee9459a1e82c5da4c32442d8ca09f316.png" alt="img"></p><p>flag为flag{396013bb-f4d4-458c-bfab-c8f898fb8f74}</p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p>在做这道题的时候，主要是会使用burpsute工具，并且还要了解PHP伪协议的一些知识及概念，最后还用到了一些密码里的base64，这些都需要了解一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
